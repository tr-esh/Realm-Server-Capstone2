{"version":3,"file":"static/js/891.98af0be1.chunk.js","mappings":"ydAIe,SAASA,EAAY,GAA6C,IAA3CC,EAAO,EAAPA,QAA0BC,GAAT,EAARC,SAAe,EAALC,MAAS,EAAFF,IAAOG,GAAK,YAClEC,EAA2BL,EAA3BK,MAAOC,EAAoBN,EAApBM,MAAOC,EAAaP,EAAbO,SACtB,GAAkCC,EAAAA,EAAAA,WAAS,GAAM,eAA1CC,EAAS,KAAEC,EAAY,KAExBC,GACJ,SAACC,EAAA,EAAU,CACTC,QAAQ,KACRC,MAAM,cACNb,GAAI,CACFc,SAAU,GACVC,WAAY,UACZC,WAAY,MACZC,cAAe,YACfC,GAAI,EACJC,SAAU,WACVN,MAAOL,EAAY,UAAY,UAC/B,WAAY,CACVY,QAAS,KACTD,SAAU,WACVE,MAAO,OACPC,OAAQ,OACRC,IAAK,EACLC,KAAM,EACNC,QAAS,EACTC,WAAY,qCAEd,iBAAkB,CAChBC,gBAAiB,YAEnB,SAEDtB,IAKL,OACE,UAACuB,EAAA,GAAI,gBACHC,aAAc,kBAAMpB,GAAa,EAAK,EACtCqB,aAAc,kBAAMrB,GAAa,EAAM,EACvCT,IAAE,QACA+B,GAAI,EACJC,GAAI,EACJC,aAAc,GACdN,gBAAiB,UACjBR,SAAU,WACVO,WAAY,oCACZ,UAAW,CACTC,gBAAiB,UACjBO,OAAQ,YAEPlC,IAEDG,GAAK,eAET,UAACgC,EAAA,EAAK,CAACC,UAAU,SAASC,WAAW,SAAQ,UAC1C3B,GACD,SAACC,EAAA,EAAU,CACTC,QAAQ,YACRC,MAAM,gBACNb,GAAI,CACFa,MAAO,QACPC,SAAU,GACVC,WAAY,UACZC,WAAY,MACZC,cAAe,aACfqB,WAAY,GACZC,GAAI,GACJ,SAEDjC,QAGL,SAACkC,EAAA,EAAG,CACFxC,GAAI,CACFmB,SAAU,WACVI,IAAK,MACLkB,UAAW,mBACXpB,MAAO,OACPC,OAAQ,MACRoB,IAAK,EACLC,SAAU,UACV,UAEF,SAACH,EAAA,EAAG,CACFI,UAAU,MACV5C,GAAI,CACFqB,MAAO,OACPC,OAAQ,OACRW,aAAc,UACdY,QAAS,QACT1B,SAAU,WACV2B,WAAW,sEAAD,OAAwE1C,EAAK,KACvF2C,eAAgB,QAChBC,mBAAoB,iBAOhC,C,wHChFe,SAASC,EAAmB,GAA6D,IAA3D5C,EAAK,EAALA,MAA0CL,GAA3B,EAARM,SAAc,EAAJ4C,KAAI,EAAErC,MAAqB,EAAFb,IAAOG,GAAK,YAC/F,GAAkCI,EAAAA,EAAAA,UAAS,IAAG,eAAvC4C,EAAS,KAAEC,EAAY,KAC9B,GAAoC7C,EAAAA,EAAAA,UAAS,GAAE,eAAxC8C,EAAU,KAAEC,EAAa,KAChC,GAAkC/C,EAAAA,EAAAA,WAAS,GAAM,eAA1CgD,EAAS,KAAEC,EAAY,KAC9B,GAA8CjD,EAAAA,EAAAA,UAAS,MAAK,eAArDkD,EAAe,KAAEC,EAAkB,KAC1C,GAAgDnD,EAAAA,EAAAA,WAAS,GAAM,eAAxDoD,EAAgB,KAAEC,EAAmB,MAG3CC,EAAAA,EAAAA,YAAU,WAEP,IAAMC,EAAS,yCAAG,oHAEaC,MAAM,wBAAwB,KAAD,EAAtC,OAARC,EAAQ,gBACKA,EAASC,OAAO,KAAD,EAA5BC,EAAI,OACVd,EAAac,EAAKC,cAClBb,EAAcY,EAAKb,YAAY,kDAE/Be,QAAQC,MAAM,uBAAuB,EAAD,IAAS,0DAEpD,kBATc,mCAWfP,IAGA,IAAMQ,EAAaC,YAAYT,EAAW,KAG1C,OAAO,kBAAMU,cAAcF,EAAY,CAC3C,GAAG,IAEH,IAUMG,EAAY,yCAAG,WAAOC,EAAQC,GAAO,0FAG9BA,EAAQ,CAAD,eAC8B,OAAtCP,QAAQC,MAAM,wBAAwB,6BAI3B,YAAXK,EAAoB,iBAEC,OADfE,EAAG,mCAA+BD,EAAQE,KACjC,OAAO,EAAD,OACEC,EAAYF,EADpB,QACiC,KAAD,EAAzCZ,EAAQ,OACde,GAAef,EAAUU,GAAQ,wBACf,SAAXA,GAEPd,GAAoB,GACpBF,EAAmBiB,IAEnBP,QAAQC,MAAM,mBACjB,0DAEDD,QAAQC,MAAM,SAAD,OAAUK,EAAM,WAAY,0DAEhD,gBAvBiB,wCAyBZI,EAAW,yCAAG,WAAOF,EAAKI,GAAM,4FACXjB,MAAMa,EAAK,CAC9BI,OAAQA,EACRC,QAAS,CACL,eAAgB,sBAErB,KAAD,EALY,OAARjB,EAAQ,yBAMPA,GAAQ,2CAClB,gBARgB,wCAUXe,GAAiB,SAACf,EAAUU,GAC1BV,EAASkB,IACT1B,GAAa,GACbY,QAAQe,IAAI,WAAD,OAAuB,YAAXT,EAAuB,WAAa,OAAM,oBAGjEN,QAAQC,MAAM,aAAD,OAAcK,EAAM,KAAKV,EAASoB,WAGvD,EAEMC,GAA0B,WAC5BzB,GAAoB,EACxB,EAEM0B,GAAyB,yCAAG,2FAGP,OAFvB1B,GAAoB,GACdgB,EAAG,kCAA8BnB,EAAgBoB,KACxC,SAAS,EAAD,OACAC,EAAYF,EADpB,UACiC,KAAD,EAAzCZ,EAAQ,OACde,GAAef,EAAU,QAAQ,2CACpC,kBAN8B,mCAS/B,OACI,gCACKX,EAAa,GAAKF,EAAUoC,OAAS,GAClC,SAAC3D,EAAA,GAAI,gBACDgB,UAAW4C,EAAAA,GACXC,WAAS,EACTzF,GAAIA,GACAG,GAAK,cAET,SAACqF,EAAA,GAAI,CAACE,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAG,UACtB,UAACpD,EAAA,EAAG,YACA,SAAC7B,EAAA,EAAU,CAACC,QAAQ,KAAKZ,GAAI,CAAEc,SAAU,GAAIC,WAAY,sBAAuBC,WAAY,MAAOH,MAAO,QAASI,cAAe,aAAc,SAC3IZ,KAGL,UAACwF,EAAA,EAAM,CACHjF,QAAQ,YACRC,MAAM,UACNiF,QAAS,kBAAMtC,GAAa,EAAK,EACjCxD,GAAI,CACAiC,aAAc,GACd8D,QAAS,YACTpE,gBAAiB,cACjBqE,OAAQ,oBACRnF,MAAO,UACPE,WAAY,UACZC,WAAY,MACZC,cAAe,YACf,UAAW,CACPU,gBAAiB,UACjBd,MAAO,SAEb,WAEF,SAAC2B,EAAA,EAAG,CAACxC,GAAI,CAAGiC,aAAc,MAAOZ,MAAO,GAAIC,OAAQ,GAAIK,gBAAiB,UAAWkB,QAAS,OAAQoD,eAAgB,SAAU5D,WAAY,SAAU6D,YAAa,GAAI,UAClK,SAACvF,EAAA,EAAU,CAACC,QAAQ,QAAQZ,GAAI,CAAEa,MAAO,OAAQG,WAAY,OAASD,WAAY,WAAW,SAAEsC,MAC7F,8BAMtB,MAEJ,SAAC8C,EAAA,EAAK,CACFC,KAAM7C,EACN8C,QA9Ga,WACrB7C,GAAa,GACbE,EAAmB,KACvB,EA4GY,kBAAgB,cAChB,mBAAiB,oBACjB1D,GAAI,CAAE6C,QAAS,OAAQR,WAAY,SAAU4D,eAAgB,SAAUlF,WAAY,WAAY,UAE/F,UAACyB,EAAA,EAAG,CAACxC,GAAI,CAAEsG,QAAS,mBAAoBC,UAAW,GAAItE,aAAc,EAAGuE,EAAG,EAAGC,SAAU,IAAK1F,WAAY,WAAY,WACjH,UAACJ,EAAA,EAAU,CAACC,QAAQ,KAAK8F,GAAG,cAAc9D,UAAU,KAAK5C,GAAI,CAAEe,WAAY,UAAWC,WAAY,OAAQ,UAAC,YAC/F,iBAAM2F,MAAO,CAAE9F,MAAO,WAAY,SAAC,kBAG/C,SAACF,EAAA,EAAU,CAACC,QAAQ,YAAY8F,GAAG,cAAc9D,UAAU,WAAW5C,GAAI,CAAEe,WAAY,WAAY,SAAC,8CAGrG,SAAC6F,EAAA,EAAI,UACAzD,EAAU0D,KAAI,SAAAlC,GAAO,OAClB,UAACmC,EAAA,GAAQ,CAAmB9G,GAAI,CAAE6C,QAAS,OAAQR,WAAY,SAAU4D,eAAgB,gBAAkBc,UAAW,QAAQ,WAC1H,SAACC,EAAA,EAAc,WACX,SAACC,EAAA,EAAM,CAACC,IAAI,gBAAgBC,IAAKxC,EAAQyC,cAAgBzC,EAAQyC,aAAaxC,IAAK5E,GAAI,CAAEqB,MAAO,GAAIC,OAAQ,GAAI4E,YAAa,YAEjI,SAACmB,EAAA,EAAY,CACTC,QAAS3C,EAAQ4C,YACjBC,UAAW7C,EAAQ8C,aAAR9C,OAAqCA,EAAQ+C,QACxD1H,GAAI,CAAEe,WAAY,UAAW,wBAAyB,CAAEA,WAAY,eAGxE,UAACyB,EAAA,EAAG,CAACxC,GAAI,CAAE6C,QAAS,OAAQ8E,IAAK,GAAI,WACjC,SAACC,EAAA,EAAO,CAACvH,MAAM,UAAUsG,MAAO,CAAE5F,WAAY,UAAWF,MAAO,UAAWc,gBAAiB,WAAY,UACpG,SAACkG,EAAA,EAAU,CAAC/B,QAAS,kBAAMrB,EAAa,UAAWE,EAAQ,EAAC,UACxD,SAACmD,EAAA,EAAS,SAIlB,SAACF,EAAA,EAAO,CAACvH,MAAM,OAAOsG,MAAO,CAAE5F,WAAY,UAAWF,MAAO,UAAWc,gBAAiB,WAAY,UACjG,SAACkG,EAAA,EAAU,CAAC/B,QAAS,kBAAMrB,EAAa,OAAQE,EAAQ,EAAC,UACrD,SAACoD,EAAA,EAAS,aAnBXpD,EAAQE,IAuBZ,YAM3B,UAACmD,EAAA,EAAM,CACC5B,KAAMzC,EACN0C,QAAShB,GACT,kBAAgB,4BAChB,mBAAiB,kCACjB4C,WAAY,CACRtB,MAAO,CACH1E,aAAc,KAEpB,WAEF,SAACiG,EAAA,EAAW,CAACvB,MAAO,CAAC5F,WAAY,UAAWC,WAAY,OAAS0F,GAAG,4BAA2B,SAAC,sBAChG,SAACyB,EAAA,EAAa,WACV,UAACC,EAAA,EAAiB,CAAEzB,MAAO,CAAC5F,WAAY,UAAWC,WAAY,OAAQ0F,GAAG,kCAAiC,UAAC,oCACtEjD,GAAmBA,EAAgB8D,YAAY,UAGzF,UAACc,EAAA,EAAa,CAAC1B,MAAO,CAACV,eAAgB,iBAAiB,WACpD,SAACJ,EAAA,EAAM,CACHC,QAAST,GACTsB,MAAO,CACH2B,oBAAqB,EACrBC,uBAAwB,GACxBzF,WAAY,UACZjC,MAAO,QACP2H,SAAU,GACZ,SACL,QAGD,SAAC3C,EAAA,EAAM,CACHC,QAASR,GACTqB,MAAO,CACH8B,qBAAsB,EACtBC,wBAAyB,GACzB5F,WAAY,UACZjC,MAAO,QACP2H,SAAU,GAEdG,WAAS,WACZ,gBASzB,C,oCClQe,SAASC,EAAS,GAAwC,IAAtC9C,EAAO,EAAPA,QAASzC,EAAU,EAAVA,WAAmBlD,GAAL,EAAFH,IAAY,aAChE,OACI,UAAC6F,EAAA,GAAM,gBACH,gBAAc,cACd,gBAAc,OACdC,QAASA,EACT9F,GAAI,CACA2B,gBAAiB,cACjB,UAAW,CACPA,gBAAiB,UACjBkH,QAAS,GACThI,MAAO,WAEXoB,aAAc,EACdpB,MAAO,oBACPQ,MAAO,IACPC,OAAQ,GACRR,SAAU,SACVE,WAAY,MACZD,WAAY,UACZiF,OAAQ,sBAER7F,GAAK,eAGT,SAACqC,EAAA,EAAG,CAACxC,GAAI,CAAEiC,aAAc,MACdZ,MAAO,GACPC,OAAQ,GACRK,gBAAiB,cACjBd,MAAO,oBACPmF,OAAQ,8BACRnD,QAAS,OACToD,eAAgB,SAChB5D,WAAY,SACZ6D,YAAa,GACV,UACV,SAACvF,EAAA,EAAU,CAACC,QAAQ,QACRZ,GAAI,CAAEa,MAAO,oBACPG,WAAY,OACZF,SAAU,OACVC,WAAY,WACZ,SACGsC,MAGnB,eAMlB,C,0BC/Be,SAASyF,IAAe,IAAD,EAC9BC,GAAWC,EAAAA,EAAAA,MACjB,GAAgCzI,EAAAA,EAAAA,UAAS,IAAG,eAArC0I,EAAQ,KAAEC,EAAW,KAC5B,GAAkC3I,EAAAA,EAAAA,UAAS,IAAG,eAAvC4C,EAAS,KAAEC,EAAY,KAC9B,GAAoC7C,EAAAA,EAAAA,UAAS,GAAE,eAAxC8C,EAAU,KAAEC,EAAa,KAChC,GAAkC/C,EAAAA,EAAAA,WAAS,GAAM,eAA1CgD,EAAS,KAAEC,EAAY,KAC9B,GAA8CjD,EAAAA,EAAAA,UAAS,MAAK,eAArDkD,EAAe,KAAEC,EAAkB,KAC1C,GAAgDnD,EAAAA,EAAAA,WAAS,GAAM,eAAxDoD,EAAgB,KAAEC,GAAmB,KAC5C,IAAkDrD,EAAAA,EAAAA,UAAS,IAAG,iBAAvD4I,GAAiB,MAAEC,GAAoB,MACxCC,IAAgBC,EAAAA,EAAAA,GAAc,uBAGpCzF,EAAAA,EAAAA,YAAU,WAEN,IAAM0F,EAAa,yCAAG,oHAEKxF,MAAM,yBAAyB,KAAD,EAAvC,KAARC,EAAQ,QACDkB,GAAG,CAAD,gCACMlB,EAASC,OAAO,KAAD,EAA5BC,EAAI,OACVE,QAAQe,IAAI,oBAAqBjB,GACjCgF,EAAYhF,GAAM,wBAElBE,QAAQC,MAAM,gCAAgC,0DAGhDD,QAAQC,MAAM,8BAA8B,EAAD,IAAS,0DAEvD,kBAbkB,mCAenBkF,IAGA,IAAMjF,EAAaC,YAAYgF,EAAe,KAG9C,OAAO,kBAAM/E,cAAcF,EAAY,CACzC,GAAG,KAEHT,EAAAA,EAAAA,YAAU,WAER,IAAMC,EAAS,yCAAG,sHAESC,MAAM,+BAA+B,KAAD,EAA7C,OAARC,EAAQ,gBACKA,EAASC,OAAO,KAAD,EAA5BC,EAAI,OAEJsF,EAA6BtF,EAAKC,aAAa0C,KAAI,SAAA4C,GACvD,IAAMC,EAAoB,IAAIC,KAAKF,EAASC,mBAAmBE,UACzDC,GAAmB,IAAIF,MAAOC,UAC9BE,EAAgBC,KAAKC,MAAMN,EAAoBG,GAAgB,OACrE,OAAO,kBAAKJ,GAAQ,IAAEK,cAAAA,GACxB,IACA1G,EAAaoG,GACblG,EAAcY,EAAKb,YAAY,kDAE/Be,QAAQC,MAAM,uBAAuB,EAAD,IAAS,0DAEhD,kBAhBc,mCAkBbP,GACJ,GAAG,IAGL,IAKMmG,GAAmB,yCAAG,WAAO1C,GAAW,+FAGnBxD,MAAM,kBAAD,OAAmBwD,GAAe,CAC5DvC,OAAQ,OACRC,QAAS,CACP,eAAgB,sBAEjB,KAAD,EALY,WAMDC,GAAG,CAAD,2CAGP,IAAIgF,MAAM,4BAA4B,KAAD,oDAG7C9F,QAAQC,MAAM,0BAA0B,EAAD,IACvC,0DAEH,gBAlBwB,sCA8BnBI,GAAY,yCAAG,WAAOC,EAAQyF,GAAO,0FAG9BA,EAAQ,CAAD,eAC8B,OAAtC/F,QAAQC,MAAM,wBAAwB,6BAI3B,YAAXK,EAAoB,iBAEC,OADfE,EAAG,mCAA+BuF,EAAQ5C,aACjC,OAAO,EAAD,OACEzC,GAAYF,EADpB,QACiC,KAAD,EAAzCZ,EAAQ,OACde,GAAef,EAAUU,GAAQ,wBACf,WAAXA,GAEPd,IAAoB,GACpBF,EAAmByG,IAEnB/F,QAAQC,MAAM,mBACjB,0DAEDD,QAAQC,MAAM,SAAD,OAAUK,EAAM,WAAY,0DAEhD,gBAvBiB,wCAyBZI,GAAW,yCAAG,WAAOF,EAAKI,GAAM,4FACXjB,MAAMa,EAAK,CAC9BI,OAAQA,EACRC,QAAS,CACL,eAAgB,sBAErB,KAAD,EALY,OAARjB,EAAQ,yBAMPA,GAAQ,2CAClB,gBARgB,wCAUXe,GAAiB,SAACf,EAAUU,GAC1BV,EAASkB,IACT1B,GAAa,GACbY,QAAQe,IAAI,WAAD,OAAuB,YAAXT,EAAuB,WAAa,OAAM,oBAGjEN,QAAQC,MAAM,aAAD,OAAcK,EAAM,KAAKV,EAASoB,WAGvD,EAYIgF,GAAwB,yCAAG,sFAC3BjB,KAAsB1F,EAAe,0CAEdM,MAAM,8BAAD,OAA+BN,GAAmB,CAC5EuB,OAAQ,SACRC,QAAS,CACP,eAAgB,sBAEjB,KAAD,EALY,WAMDC,GAAG,CAAD,gBAEbd,QAAQe,IAAI,gCACZvB,IAAoB,GACpBJ,GAAa,GACb4F,GAAqB,IACrB,8BAEM,IAAIc,MAAM,4BAA4B,KAAD,qDAG7C9F,QAAQC,MAAM,0BAA0B,EAAD,IACvC,gCAGFD,QAAQC,MAAM,kDACd,0DAEH,kBA3B6B,mCA8B5B,OACE,UAACgG,EAAA,EAAS,CAAC5D,SAAS,KAAK6D,UAAU,oBAAmB,WACpD,UAAC9E,EAAA,GAAI,CAACC,WAAS,EAAC8E,QAAS,EAAGrJ,GAAI,EAAE,WAElC,SAACsE,EAAA,GAAI,CAACC,WAAS,EAACC,MAAI,EAAC6E,QAAS,EAAGtE,eAAe,gBAAe,SAC1DoD,IACC,iCACE,SAAC7D,EAAA,GAAI,CAACE,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAE,UACvB,iBAAMe,OAAK,GAAI9F,MAAO,QACVoB,aAAc,GACd8D,QAAS,YACTpE,gBAAiB,cACjBqE,OAAQ,sBAAmB,iBACpB,YAAS,sBACJ,wBAAqB,sBACrB,QAAK,oBACP,KAAE,yBACG,cAAW,sBACdqD,GAAgB,OAAS,MAAG,mBAC/BA,GAAgB,eAAiB,SAAO,GAC3D,SAAC,8BAKL,SAAC7D,EAAA,GAAI,CAACE,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAE,UACvB,SAACzD,EAAA,EAAK,CACJnC,GAAI,CACFwK,WAAY,SACZ,UAEF,SAACvH,EAAkB,CACjBjD,GAAI,CACF2B,gBAAiB,UACjB4E,UAAW,kBAOrB,iCACE,SAACf,EAAA,GAAI,CAACE,MAAI,EAACC,GAAI,GAAG,UAChB,SAAC1C,EAAkB,CACjBjD,GAAI,CACF2B,gBAAiB,UACjB4E,UAAW,OACXkE,aAAc,aAKpB,SAACjF,EAAA,GAAI,CAACE,MAAI,EAACC,GAAI,GAAG,UAChB,iBAAMgB,MAAO,CAAE1E,aAAc,GACb8D,QAAS,YACTpE,gBAAiB,cACjBqE,OAAQ,oBACRnF,MAAO,UACPE,WAAY,UACZC,WAAY,MACZF,SAAU,GACVG,cAAe,aAC7B,SAAC,kCAQVgI,EAASpC,KAAI,SAAC9G,GAAO,OACpB,SAACyF,EAAA,GAAI,CAACE,MAAI,EAACnD,GAAI,EAAGoD,GAAI,GAAI+E,GAAI,GAAI9E,GAAI,EAAG+E,GAAI,EAAE,UAC7C,SAAC7K,EAAW,CACVE,GAAI,CAAEsB,OAAQ,KACdwE,QAAS,kBAnMOyB,EAmMkBxH,EAAQwH,iBAjMpDwB,EAAS,aAAD,OAAcxB,GAAe,CAAEqD,MAAO,CAAEvK,MAAOkH,KAF9B,IAACA,CAmMsC,EACtDxH,QAAS,CACPO,SAAS,GAAD,OAAKP,EAAQ0H,aAAY,cAAM1H,EAAQ2H,SAC/CtH,MAAOL,EAAQqH,aAAaxC,IAC5BiG,UAAW9K,EAAQ8K,UACnBxK,MAAON,EAAQwH,aAEjBtH,SAAUgK,MAVuClK,EAAQ8E,IAYtD,KAGT,SAACW,EAAA,GAAI,CAACC,WAAS,EAACvE,GAAI,EAAGqJ,QAAS,EAAGhI,GAAI,EAAE,UAC3B,SAACiD,EAAA,GAAI,CAACE,MAAI,EAACC,GAAI,GAAG,UACd,SAACxD,EAAA,EAAK,CACNC,UAAU,MACVC,WAAW,SACX4D,eAAe,WACfsE,QAAS,EAAE,UAET,SAAC3B,EAAQ,CAACvF,WAAYA,EAAYyC,QAAS,kBAAMtC,GAAa,EAAK,cAMvF,SAAC2C,EAAA,EAAK,CACEC,KAAM7C,EACN8C,QAjMW,WACrB7C,GAAa,GACbE,EAAmB,KACvB,EA+Lc,kBAAgB,cAChB,mBAAiB,oBACjB1D,GAAI,CAAE6C,QAAS,OAAQR,WAAY,SAAU4D,eAAgB,SAAUlF,WAAY,WAAY,UAE/F,UAACyB,EAAA,EAAG,CAACxC,GAAI,CAAEsG,QAAS,mBAAoBC,UAAW,GAAItE,aAAc,EAAGuE,EAAG,EAAGC,SAAU,IAAK1F,WAAY,WAAY,WACjH,UAACJ,EAAA,EAAU,CAACC,QAAQ,KAAK8F,GAAG,cAAc9D,UAAU,KAAK5C,GAAI,CAAEe,WAAY,UAAWC,WAAY,OAAQ,UAAC,UACjG,iBAAM2F,MAAO,CAAE9F,MAAO,WAAY,SAAC,cAG7C,SAACF,EAAA,EAAU,CAACC,QAAQ,WAAW8F,GAAG,cAAc9D,UAAU,WAAW5C,GAAI,CAAEe,WAAY,UAAWD,SAAU,QAAS,SAAC,iIAItG,IAAfuC,GACO,SAAC1C,EAAA,EAAU,CAACC,QAAQ,QAAQZ,GAAI,CAAEe,WAAY,UAAWF,MAAO,UAAWiK,OAAQ,qBAAqB,SAAC,wBAEzG,SAAClE,EAAA,EAAI,UACAzD,EAAU0D,KAAI,SAAAsD,GAAO,OAClB,UAACrD,EAAA,GAAQ,CAAmB9G,GAAI,CAAE6C,QAAS,OAAQR,WAAY,SAAU4D,eAAgB,gBAAiBc,UAAW,OAAQ5F,SAAU,YAAa,WAChJ,UAAC6F,EAAA,EAAc,YACb,SAACC,EAAA,EAAM,CAACC,IAAI,gBAAgBC,IAAKgD,EAAQ/C,cAAgB+C,EAAQ/C,aAAaxC,IAAK5E,GAAI,CAAEqB,MAAO,GAAIC,OAAQ,GAAI4E,YAAa,UAC3H,UAACvF,EAAA,EAAU,CAACC,QAAQ,QAAQZ,GAAI,CAAEmB,SAAU,WAAYI,IAAK,OAAQwJ,OAAQ,MAAOvJ,KAAM,OAAQG,gBAAiB,qBAAsBb,SAAU,OAAQD,MAAO,OAAQkF,QAAS,UAAW9D,aAAc,QAAS,UAClNkI,EAAQL,cAAc,eAG7B,SAACzC,EAAA,EAAY,CACTC,QAAS6C,EAAQ5C,YACjBC,UAAW2C,EAAQ1C,aAAR0C,OAAqCA,EAAQzC,QACxD1H,GAAI,CAAEe,WAAY,UAAW,wBAAyB,CAAEA,WAAY,eAGxE,UAACyB,EAAA,EAAG,CAACxC,GAAI,CAAE6C,QAAS,OAAQ8E,IAAK,GAAI,WACjC,SAACC,EAAA,EAAO,CAACvH,MAAM,UAAUsG,MAAO,CAAE5F,WAAY,UAAWF,MAAO,UAAWc,gBAAiB,WAAY,UACpG,SAACkG,EAAA,EAAU,WACP,SAACmD,EAAA,EAAmB,CAAClF,QAAS,kBAAMrB,GAAa,UAAW0F,EAAQ,SAI5E,SAACvC,EAAA,EAAO,CAACvH,MAAM,SAASsG,MAAO,CAAE5F,WAAY,UAAWF,MAAO,UAAWc,gBAAiB,WAAY,UACnG,SAACkG,EAAA,EAAU,WACP,SAACoD,EAAA,EAAkB,CAACnF,QAAS,kBAvLzDyB,EAuL4E4C,EAAQ5C,YArLxG7D,EAAmB6D,QACnB3D,IAAoB,GAHD,IAAC2D,CAuLgG,aAtBrE4C,EAAQtF,IA0BZ,YAOnC,SAACsB,EAAA,EAAK,CACFC,KAAMzC,EACN0C,QAAS,kBAAMzC,IAAoB,EAAM,EACzC,kBAAgB,2BAChB,mBAAiB,iCACjB5D,GAAI,CAAE6C,QAAS,OAAQR,WAAY,SAAU4D,eAAgB,SAAUlF,WAAY,WAAY,UAE/F,UAACyB,EAAA,EAAG,CAACxC,GAAI,CAAEsG,QAAS,mBAAoBC,UAAW,GAAItE,aAAc,EAAGuE,EAAG,EAAGC,SAAU,IAAKV,QAAS,QAAS,WAC3G,SAACpF,EAAA,EAAU,CAACC,QAAQ,KAAK8F,GAAG,2BAA2B9D,UAAU,KAAK5C,GAAI,CAAEe,WAAY,UAAWC,WAAY,OAAQ,SAAC,oBAGxH,UAACL,EAAA,EAAU,CAACC,QAAQ,YAAY8F,GAAG,iCAAiC1G,GAAI,CAAEe,WAAY,UAAWD,SAAU,QAAS,UAAC,8DAErG,kBAAM6F,MAAO,CAAE3F,WAAY,MAAOH,MAAO,WAAY,UAAC,IAAE4C,EAAgB,OAAQ,4BAEhG,SAACyH,EAAA,EAAS,CACNC,MAAM,eACNvK,QAAQ,WACRwK,WAAS,EACTC,MAAOlC,GACPmC,SAhNc,SAACC,GACnCnC,GAAqBmC,EAAMC,OAAOH,MACtC,EA+MwBrL,GAAI,CAAEkB,GAAI,MAEd,SAAC2E,EAAA,EAAM,CACDjF,QAAQ,YACRkF,QAASsE,GACTqB,UAAWtC,IAAqBA,KAAsB1F,EACtDzD,GAAI,CACAkB,GAAI,EACJe,aAAc,GACdlB,WAAY,UACZC,WAAY,MACZuF,UAAW,OACX5E,gBAAmBwH,IAAqBA,KAAsB1F,EAA+B,UAAZ,UACjF5C,MAASsI,IAAqBA,KAAsB1F,EAA+B,UAAZ,UACvE,UAAW,CACP9B,gBAAiB,UACjBd,MAAO,WAEX,WAAY,CACRc,gBAAiB,UACjBd,MAAO,YAEb,SACL,kBAQvB,CC3Ze,SAAS6K,IACtB,OACE,gBAAKpB,UAAU,oBAAmB,UAE9B,SAAExB,EAAW,KAGrB,C","sources":["sections/station/stationCard.jsx","sections/station/view/pendingRequestView.jsx","sections/station/trashBin.jsx","sections/station/view/stationView.jsx","pages/Stations.jsx"],"sourcesContent":["import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Box, Card, Stack, Typography } from '@mui/material';\r\n\r\nexport default function StationCard({ station, onDelete, index, sx, ...other }) {\r\n  const { cover, title, subtitle } = station;\r\n  const [isHovered, setIsHovered] = useState(false);\r\n\r\n  const renderTitle = (\r\n    <Typography\r\n      variant=\"h6\"\r\n      color=\"textPrimary\"\r\n      sx={{\r\n        fontSize: 30,\r\n        fontFamily: \"Poppins\",\r\n        fontWeight: '700',\r\n        textTransform: 'uppercase',\r\n        mt: 2,\r\n        position: 'relative',\r\n        color: isHovered ? '#0d2135' : '#8CACFF', \r\n        '&:before': {\r\n          content: '\"\"',\r\n          position: 'absolute',\r\n          width: '100%',\r\n          height: '100%',\r\n          top: 0,\r\n          left: 0,\r\n          zIndex: -1,\r\n          transition: 'background-color 0.3s ease-in-out',\r\n        },\r\n        '&:hover:before': {\r\n          backgroundColor: '#0d2135',\r\n        },\r\n      }}\r\n    >\r\n      {title}\r\n    </Typography>\r\n  );\r\n\r\n\r\n  return (\r\n    <Card\r\n      onMouseEnter={() => setIsHovered(true)}\r\n      onMouseLeave={() => setIsHovered(false)}\r\n      sx={{\r\n        px: 4,\r\n        py: 4,\r\n        borderRadius: 10,\r\n        backgroundColor: '#10273d',\r\n        position: 'relative',\r\n        transition: 'background-color 0.3s ease-in-out',\r\n        '&:hover': {\r\n          backgroundColor: '#8CACFF',\r\n          cursor: 'pointer',\r\n        },\r\n        ...sx,\r\n      }}\r\n      {...other}\r\n    >\r\n      <Stack direction=\"column\" alignItems=\"center\">\r\n        {renderTitle}\r\n        <Typography\r\n          variant=\"subtitle2\"\r\n          color=\"textSecondary\"\r\n          sx={{\r\n            color: 'white',\r\n            fontSize: 10,\r\n            fontFamily: \"Poppins\",\r\n            fontWeight: '400',\r\n            textTransform: 'capitalize',\r\n            lineHeight: 0.2,\r\n            mb: 3,\r\n          }}\r\n        >\r\n          {subtitle}\r\n        </Typography>\r\n      </Stack>\r\n      <Box\r\n        sx={{\r\n          position: 'absolute',\r\n          top: '50%',\r\n          transform: 'translateY(-23%)',\r\n          width: '100%',\r\n          height: '70%',\r\n          ml: -4,\r\n          overflow: 'hidden', // Ensure the gradient doesn't overflow\r\n        }}\r\n      >\r\n        <Box\r\n          component=\"div\"\r\n          sx={{\r\n            width: '100%',\r\n            height: '100%',\r\n            borderRadius: 'inherit',\r\n            display: 'block',\r\n            position: 'relative', // Position relative for pseudo-element\r\n            background: `linear-gradient(to top, rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0)), url(${cover})`, // Gradient overlay + Image URL\r\n            backgroundSize: 'cover',\r\n            backgroundPosition: 'center',\r\n          }}\r\n        />\r\n        \r\n      </Box>\r\n    </Card>\r\n  );\r\n}\r\n\r\nStationCard.propTypes = {\r\n  station: PropTypes.object.isRequired,\r\n  index: PropTypes.number,\r\n  onDelete: PropTypes.func,\r\n  sx: PropTypes.object,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { useState, useEffect } from 'react';\r\nimport { \r\n    Card, \r\n    Box, \r\n    Grid, \r\n    Typography, \r\n    IconButton, \r\n    Modal, \r\n    Button, \r\n    List, \r\n    ListItem, \r\n    ListItemText, \r\n    ListItemAvatar, \r\n    Avatar, \r\n    Tooltip,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle\r\n} from '@mui/material';\r\nimport CheckIcon from '@mui/icons-material/Check';\r\nimport ClearIcon from '@mui/icons-material/Clear';\r\n\r\nexport default function PendingRequestView({ title, subtitle, icon, color = 'primary', sx, ...other }) {\r\n    const [documents, setDocuments] = useState([]);\r\n    const [totalCount, setTotalCount] = useState(0);\r\n    const [modalOpen, setModalOpen] = useState(false);\r\n    const [selectedRequest, setSelectedRequest] = useState(null);\r\n    const [confirmationOpen, setConfirmationOpen] = useState(false);\r\n\r\n\r\n     useEffect(() => {\r\n        // Function to fetch first document and total count\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await fetch('api/realm/getRequest');\r\n                const data = await response.json();\r\n                setDocuments(data.allDocuments);\r\n                setTotalCount(data.totalCount);\r\n            } catch (error) {\r\n                console.error('Error fetching data:', error);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n\r\n        // Set up interval for polling\r\n        const intervalId = setInterval(fetchData, 5000);\r\n\r\n        // Clean up interval on component unmount\r\n        return () => clearInterval(intervalId);\r\n    }, []); // Run only once on component mount\r\n\r\n    const handleModalOpen = (request) => {\r\n        setSelectedRequest(request);\r\n        setModalOpen(true);\r\n    };\r\n\r\n    const handleModalClose = () => {\r\n        setModalOpen(false);\r\n        setSelectedRequest(null);\r\n    };\r\n\r\n    const handleAction = async (action, request) => {\r\n        try {\r\n            // Make sure there is a selected request\r\n            if (!request) {\r\n                console.error('No request selected.');\r\n                return;\r\n            }\r\n    \r\n            if (action === 'approve') {\r\n                const url = `api/realm/approvePending/${request._id}`;\r\n                const method = 'POST';\r\n                const response = await fetchAction(url, method);\r\n                handleResponse(response, action);\r\n            } else if (action === 'deny') {\r\n                // Open confirmation dialog when denying\r\n                setConfirmationOpen(true);\r\n                setSelectedRequest(request);\r\n            } else {\r\n                console.error('Invalid action.');\r\n            }\r\n        } catch (error) {\r\n            console.error(`Error ${action}:`, error);\r\n        }\r\n    };\r\n\r\n    const fetchAction = async (url, method) => {\r\n        const response = await fetch(url, {\r\n            method: method,\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n        return response;\r\n    };\r\n\r\n    const handleResponse = (response, action) => {\r\n        if (response.ok) {\r\n            setModalOpen(false);\r\n            console.log(`Request ${action === 'approve' ? 'approved' : 'deny'} successfully.`);\r\n            // Update UI or take further actions\r\n        } else {\r\n            console.error(`Failed to ${action}:`, response.statusText);\r\n            // Show an error message to the user or take further actions\r\n        }\r\n    };\r\n\r\n    const handleConfirmationClose = () => {\r\n        setConfirmationOpen(false);\r\n    };\r\n\r\n    const handleConfirmationConfirm = async () => {\r\n        setConfirmationOpen(false);\r\n        const url = `api/realm/deletePending/${selectedRequest._id}`;\r\n        const method = 'DELETE';\r\n        const response = await fetchAction(url, method);\r\n        handleResponse(response, 'deny');\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            {totalCount > 0 || documents.length > 0 ? (\r\n                <Card\r\n                    component={Grid}\r\n                    container  \r\n                    sx={sx}\r\n                    {...other}\r\n                >\r\n                    <Grid item xs={12} md={12}>\r\n                        <Box>\r\n                            <Typography variant=\"h4\" sx={{ fontSize: 50, fontFamily: \"'Arimo', sans-serif\", fontWeight: '700', color: 'white', textTransform: 'uppercase' }}>\r\n                                {title}\r\n                            </Typography>\r\n    \r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={() => setModalOpen(true)}\r\n                                sx={{\r\n                                    borderRadius: 30, // Rounded border\r\n                                    padding: '10px 20px', // Adjust padding as needed\r\n                                    backgroundColor: 'transparent', // Transparent background\r\n                                    border: '2px solid #1976d2', // Blue outline\r\n                                    color: '#1976d2', // Blue text color\r\n                                    fontFamily: \"Poppins\",\r\n                                    fontWeight: '600', // Bold text\r\n                                    textTransform: 'uppercase', // Uppercase text\r\n                                    '&:hover': {\r\n                                        backgroundColor: '#1976d2', // Blue background on hover\r\n                                        color: '#fff', // White text on hover\r\n                                    },\r\n                                }}\r\n                            >\r\n                                <Box sx={{  borderRadius: '50%', width: 30, height: 30, backgroundColor: '#1976d2', display: 'flex', justifyContent: 'center', alignItems: 'center', marginRight: 2 }}>\r\n                                    <Typography variant=\"body1\" sx={{ color: '#fff', fontWeight: 'bold' , fontFamily: \"Poppins\"}}>{totalCount}</Typography>\r\n                                </Box>\r\n                                Pending Requests\r\n                            </Button>\r\n                        </Box>\r\n                    </Grid>\r\n                </Card>\r\n            ) : null}\r\n\r\n            <Modal\r\n                open={modalOpen}\r\n                onClose={handleModalClose}\r\n                aria-labelledby=\"modal-title\"\r\n                aria-describedby=\"modal-description\"\r\n                sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', fontFamily: 'Poppins' }}\r\n            >\r\n                <Box sx={{ bgcolor: 'background.paper', boxShadow: 24, borderRadius: 8, p: 4, maxWidth: 400, fontFamily: 'Poppins' }}>\r\n                    <Typography variant=\"h6\" id=\"modal-title\" component=\"h2\" sx={{ fontFamily: \"Poppins\", fontWeight: '700' }}> \r\n                        PENDING <span style={{ color: '#8CACFF' }}> REQUESTS</span>  \r\n                    </Typography>\r\n\r\n                    <Typography variant=\"subtitle4\" id=\"modal-title\" component=\"subtitle\" sx={{ fontFamily: 'Poppins' }}> \r\n                        Requests for the approval of new station\r\n                    </Typography>\r\n                    <List>\r\n                        {documents.map(request => (\r\n                            <ListItem key={request._id} sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' , marginTop: '2rem'}}>\r\n                                <ListItemAvatar>\r\n                                    <Avatar alt=\"Station Image\" src={request.stationImage && request.stationImage.url} sx={{ width: 70, height: 70, marginRight: '8px'}} />\r\n                                </ListItemAvatar>\r\n                                <ListItemText \r\n                                    primary={request.stationName} \r\n                                    secondary={request.siteLocation + '  ' + '| ' + request.address} \r\n                                    sx={{ fontFamily: 'Poppins', '& .MuiTypography-root': { fontFamily: 'Poppins' } }}\r\n                                />\r\n\r\n                                <Box sx={{ display: 'flex', gap: 1 }}>\r\n                                    <Tooltip title=\"Approve\" style={{ fontFamily: 'Poppins', color: '#a4c2aa', backgroundColor: '#e8f4ea' }}>\r\n                                        <IconButton onClick={() => handleAction('approve', request)}>\r\n                                            <CheckIcon />\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n\r\n                                    <Tooltip title=\"Deny\" style={{ fontFamily: 'Poppins', color: '#C16262', backgroundColor: '#FFE4E4' }}>\r\n                                        <IconButton onClick={() => handleAction('deny', request)}>\r\n                                            <ClearIcon />\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                </Box>\r\n                            </ListItem>\r\n                        ))}\r\n                    </List>\r\n                </Box>\r\n            </Modal>\r\n\r\n            <Dialog\r\n                    open={confirmationOpen}\r\n                    onClose={handleConfirmationClose}\r\n                    aria-labelledby=\"confirmation-dialog-title\"\r\n                    aria-describedby=\"confirmation-dialog-description\"\r\n                    PaperProps={{\r\n                        style: {\r\n                            borderRadius: 20 // Adjust the border radius as needed\r\n                        }\r\n                    }}\r\n                >\r\n                    <DialogTitle style={{fontFamily: 'Poppins', fontWeight: '700'}}  id=\"confirmation-dialog-title\">Decline Request?</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText  style={{fontFamily: 'Poppins', fontWeight: '500'}} id=\"confirmation-dialog-description\">\r\n                            Are you sure you want to decline {selectedRequest && selectedRequest.stationName}?\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions style={{justifyContent: 'space-between'}}>\r\n                        <Button\r\n                            onClick={handleConfirmationClose}\r\n                            style={{\r\n                                borderTopLeftRadius: 0,\r\n                                borderBottomLeftRadius: 20,\r\n                                background: '#C16262', // Red color for No\r\n                                color: 'white', // Text color\r\n                                flexGrow: 1\r\n                            }}\r\n                        >\r\n                            No\r\n                        </Button>\r\n                        <Button\r\n                            onClick={handleConfirmationConfirm}\r\n                            style={{\r\n                                borderTopRightRadius: 0,\r\n                                borderBottomRightRadius: 20,\r\n                                background: '#a4c2aa', // Green color for Yes\r\n                                color: 'white', // Text color\r\n                                flexGrow: 1\r\n                            }}\r\n                            autoFocus\r\n                        >\r\n                            Yes\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nPendingRequestView.propTypes = {\r\n    color: PropTypes.string,\r\n    icon: PropTypes.oneOfType([PropTypes.element, PropTypes.string]),\r\n    sx: PropTypes.object,\r\n    title: PropTypes.string,\r\n    subtitle: PropTypes.string,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button, Box, Typography } from \"@mui/material\";\r\nimport DeleteRoundedIcon from '@mui/icons-material/DeleteRounded';\r\n\r\nexport default function TrashBin({ onClick, totalCount, sx, ...other }) {\r\n    return (\r\n        <Button \r\n            aria-controls=\"simple-menu\" \r\n            aria-haspopup=\"true\" \r\n            onClick={onClick}\r\n            sx={{\r\n                backgroundColor: 'transparent',\r\n                '&:hover': { \r\n                    backgroundColor: '#8CACFF',\r\n                    opacity: 0.8,\r\n                    color: '#0A1929'\r\n                },\r\n                borderRadius: 5,\r\n                color: 'rgb(25, 118, 210)',\r\n                width: 150, \r\n                height: 45, \r\n                fontSize: '0.8rem',\r\n                fontWeight: '500',\r\n                fontFamily: \"Poppins\",\r\n                border: '1px solid #8CACFF'\r\n            }}\r\n            {...other}\r\n        >\r\n            \r\n            <Box sx={{ borderRadius: '50%',\r\n                       width: 20, \r\n                       height: 20, \r\n                       backgroundColor: 'transparent', \r\n                       color: 'rgb(25, 118, 210)',\r\n                       border: '1px solid rgb(25, 118, 210)',\r\n                       display: 'flex', \r\n                       justifyContent: 'center', \r\n                       alignItems: 'center', \r\n                       marginRight: 1, \r\n                        }}>\r\n                <Typography variant=\"body1\" \r\n                            sx={{ color: 'rgb(25, 118, 210)', \r\n                                  fontWeight: 'bold', \r\n                                  fontSize: '13px', \r\n                                  fontFamily: \"Poppins\",\r\n                                }}>\r\n                                    {totalCount}\r\n                </Typography>\r\n                                  \r\n            </Box>\r\n\r\n            Trash Bin\r\n\r\n        </Button>\r\n    );\r\n}\r\n\r\nTrashBin.propTypes = {\r\n    onClick: PropTypes.func,\r\n    totalCount: PropTypes.number,\r\n    sx: PropTypes.object,\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport { Container, \r\n         Grid, \r\n         Stack, \r\n         useMediaQuery, \r\n         Modal, \r\n         Box, \r\n         Typography, \r\n         List, \r\n         ListItem, \r\n         ListItemAvatar, \r\n         Avatar, \r\n         ListItemText, \r\n         Tooltip, \r\n         IconButton, \r\n         TextField, \r\n         Button } from \"@mui/material\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport '../../../components/styles/StationCardMainStyle.css'\r\nimport StationCard from '../stationCard';\r\nimport PendingRequestView from './pendingRequestView';\r\nimport TrashBin from '../trashBin';\r\nimport RestoreOutlinedIcon from '@mui/icons-material/RestoreOutlined';\r\nimport DeleteOutlinedIcon from '@mui/icons-material/DeleteOutlined';\r\n\r\nexport default function StationView() {\r\n  const navigate = useNavigate();\r\n  const [stations, setStations] = useState([]);\r\n  const [documents, setDocuments] = useState([]);\r\n  const [totalCount, setTotalCount] = useState(0);\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [selectedRequest, setSelectedRequest] = useState(null);\r\n  const [confirmationOpen, setConfirmationOpen] = useState(false);\r\n  const [confirmationInput, setConfirmationInput] = useState('');\r\n  const isLargeScreen = useMediaQuery('(min-width: 960px)'); // Check if screen size is large\r\n\r\n\r\n  useEffect(() => {\r\n      // Fetch station data from the API\r\n      const fetchStations = async () => {\r\n        try {\r\n          const response = await fetch('/api/realm/setStation');\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            console.log('Fetched stations:', data); \r\n            setStations(data);\r\n          } else {\r\n            console.error('Failed to fetch station data');\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching station data', error);\r\n        }\r\n      };\r\n\r\n      fetchStations();\r\n\r\n      // Set up interval to fetch stations periodically (every 5 seconds in this example)\r\n      const intervalId = setInterval(fetchStations, 5000);\r\n  \r\n      // Clean up interval on component unmount\r\n      return () => clearInterval(intervalId);\r\n    }, []); \r\n\r\n    useEffect(() => {\r\n      // Function to fetch first document and total count\r\n      const fetchData = async () => {\r\n        try {\r\n          const response = await fetch('api/realm/getDeletedStation');\r\n          const data = await response.json();\r\n          // Calculate remaining days and merge with existing data\r\n          const documentsWithRemainingDays = data.allDocuments.map(document => {\r\n            const deletionTimestamp = new Date(document.deletionTimestamp).getTime();\r\n            const currentTimestamp = new Date().getTime();\r\n            const remainingDays = Math.ceil((deletionTimestamp - currentTimestamp) / (1000 * 3600 * 24));\r\n            return { ...document, remainingDays };\r\n          });\r\n          setDocuments(documentsWithRemainingDays);\r\n          setTotalCount(data.totalCount);\r\n        } catch (error) {\r\n          console.error('Error fetching data:', error);\r\n        }\r\n      };\r\n\r\n        fetchData();\r\n    }, []);\r\n  \r\n\r\n  const handleStationClick = (stationName) => {\r\n    // Navigate to the station details page or perform any other action\r\n    navigate(`/stations/${stationName}`, { state: { title: stationName } });\r\n  };\r\n\r\n  const handleStationDelete = async (stationName) => {\r\n    try {\r\n      // Make a DELETE request to delete the station\r\n      const response = await fetch(`/deleteStation/${stationName}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n      });\r\n      if (response.ok) {\r\n        // Optionally, you can handle UI updates here after successful deletion\r\n      } else {\r\n        throw new Error('Failed to delete station');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting station:', error);\r\n      // Optionally, you can show an error message to the user\r\n    }\r\n  };\r\n\r\n  const handleModalOpen = (deleted) => {\r\n    setSelectedRequest(deleted);\r\n    setModalOpen(true);\r\n};\r\n\r\n  const handleModalClose = () => {\r\n      setModalOpen(false);\r\n      setSelectedRequest(null);\r\n  };\r\n\r\n  const handleAction = async (action, deleted) => {\r\n      try {\r\n          // Make sure there is a selected request\r\n          if (!deleted) {\r\n              console.error('No request selected.');\r\n              return;\r\n          }\r\n\r\n          if (action === 'restore') {\r\n              const url = `api/realm/restoreStation/${deleted.stationName}`;\r\n              const method = 'POST';\r\n              const response = await fetchAction(url, method);\r\n              handleResponse(response, action);\r\n          } else if (action === 'delete') {\r\n              // Open confirmation dialog when denying\r\n              setConfirmationOpen(true);\r\n              setSelectedRequest(deleted);\r\n          } else {\r\n              console.error('Invalid action.');\r\n          }\r\n      } catch (error) {\r\n          console.error(`Error ${action}:`, error);\r\n      }\r\n  };\r\n\r\n  const fetchAction = async (url, method) => {\r\n      const response = await fetch(url, {\r\n          method: method,\r\n          headers: {\r\n              'Content-Type': 'application/json'\r\n          }\r\n      });\r\n      return response;\r\n  };\r\n\r\n  const handleResponse = (response, action) => {\r\n      if (response.ok) {\r\n          setModalOpen(false);\r\n          console.log(`Request ${action === 'restore' ? 'restored' : 'deny'} successfully.`);\r\n          // Update UI or take further actions\r\n      } else {\r\n          console.error(`Failed to ${action}:`, response.statusText);\r\n          // Show an error message to the user or take further actions\r\n      }\r\n  };\r\n\r\n  const handleDelete = (stationName) => {\r\n    // Open confirmation modal when deleting\r\n    setSelectedRequest(stationName);\r\n    setConfirmationOpen(true);\r\n};\r\n\r\nconst handleConfirmationInputChange = (event) => {\r\n    setConfirmationInput(event.target.value);\r\n};\r\n\r\nconst handleDeleteConfirmation = async () => {\r\n  if (confirmationInput === selectedRequest) {\r\n    try {\r\n      const response = await fetch(`/api/realm/deleteStationDB/${selectedRequest}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n      if (response.ok) {\r\n        // Handle UI updates here after successful deletion\r\n        console.log('Station deleted successfully');\r\n        setConfirmationOpen(false);\r\n        setModalOpen(false); // Close the deletion modal\r\n        setConfirmationInput(''); // Reset confirmation input\r\n        // Refresh the list of stations/documents if necessary\r\n      } else {\r\n        throw new Error('Failed to delete station');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting station:', error);\r\n      // Optionally, show an error message to the user\r\n    }\r\n  } else {\r\n    console.error('Confirmation input does not match station name');\r\n    // Optionally, show an error message to the user\r\n  }\r\n};\r\n\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" className=\"station-card-main\">\r\n      <Grid container spacing={5} mt={2}>\r\n\r\n      <Grid container item spacing={2} justifyContent=\"space-between\">\r\n          {isLargeScreen ? (\r\n            <>\r\n              <Grid item xs={12} md={6}>\r\n                <span style={{ color: 'white', \r\n                            borderRadius: 30, \r\n                            padding: '10px 20px', \r\n                            backgroundColor: 'transparent', \r\n                            border: '2px solid #1976d2',\r\n                            color: '#1976d2', \r\n                            fontFamily: \"'Arimo', sans-serif\",\r\n                            fontWeight: '700',\r\n                            fontSize: 15, \r\n                            textTransform: 'uppercase',\r\n                            marginLeft: isLargeScreen ? '20px' : '0',\r\n                            display: isLargeScreen ? 'inline-block' : 'block'\r\n                }}>\r\n                  Select Station to View\r\n                </span>\r\n              </Grid>\r\n\r\n              <Grid item xs={12} md={6}>\r\n                <Stack\r\n                  sx={{\r\n                    marginLeft: '200px',\r\n                  }}\r\n                >\r\n                  <PendingRequestView\r\n                    sx={{\r\n                      backgroundColor: '#0d2135',\r\n                      boxShadow: 'none',\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              </Grid>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Grid item xs={12}>\r\n                <PendingRequestView\r\n                  sx={{\r\n                    backgroundColor: '#0d2135',\r\n                    boxShadow: 'none',\r\n                    marginBottom: '20px'\r\n                  }}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item xs={12}>\r\n                <span style={{ borderRadius: 30, \r\n                                padding: '10px 20px', \r\n                                backgroundColor: 'transparent', \r\n                                border: '2px solid #1976d2', \r\n                                color: '#1976d2', \r\n                                fontFamily: \"Poppins\",\r\n                                fontWeight: '700',\r\n                                fontSize: 15, \r\n                                textTransform: 'uppercase',\r\n                }}>\r\n                  Select Station to View\r\n                </span>\r\n              </Grid>\r\n            </>\r\n          )}\r\n        </Grid>\r\n\r\n        {stations.map((station) => (\r\n          <Grid item mb={2} xs={12} sm={12} md={6} lg={6} key={station._id}>\r\n            <StationCard\r\n              sx={{ height: 300 }}\r\n              onClick={() => handleStationClick(station.stationName)}\r\n              station={{\r\n                subtitle: `${station.siteLocation} | ${station.address}`,\r\n                cover: station.stationImage.url,\r\n                createdAt: station.createdAt,\r\n                title: station.stationName,\r\n              }}\r\n              onDelete={handleStationDelete}\r\n            />\r\n          </Grid>\r\n        ))}\r\n\r\n        <Grid container mt={3} spacing={4} mb={2}>\r\n                      <Grid item xs={12}>\r\n                          <Stack\r\n                          direction=\"row\"\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"flex-end\"\r\n                          spacing={2}\r\n                          >\r\n                            <TrashBin totalCount={totalCount} onClick={() => setModalOpen(true)} />\r\n                          </Stack>\r\n                      </Grid>\r\n                  </Grid>\r\n        </Grid>\r\n\r\n        <Modal\r\n                open={modalOpen}\r\n                onClose={handleModalClose}\r\n                aria-labelledby=\"modal-title\"\r\n                aria-describedby=\"modal-description\"\r\n                sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', fontFamily: 'Poppins' }}\r\n            >\r\n                <Box sx={{ bgcolor: 'background.paper', boxShadow: 24, borderRadius: 8, p: 4, maxWidth: 400, fontFamily: 'Poppins' }}>\r\n                    <Typography variant=\"h6\" id=\"modal-title\" component=\"h2\" sx={{ fontFamily: 'Poppins', fontWeight: '700' }}> \r\n                        TRASH <span style={{ color: '#8CACFF' }}> BIN </span>  \r\n                    </Typography>\r\n\r\n                    <Typography variant=\"subtitle\" id=\"modal-title\" component=\"subtitle\" sx={{ fontFamily: 'Poppins', fontSize: '14px' }}> \r\n                        Recently deleted stations will be kept in cloud for 30 days, after\r\n                        which they will be automatically and permanently deleted.\r\n                    </Typography>\r\n                    {totalCount === 0 ? (\r\n                            <Typography variant=\"body1\" sx={{ fontFamily: 'Poppins', color: '#A9A9A9', margin: '20px 0 20px 120px'}}>No deleted station</Typography>\r\n                        ) : (\r\n                            <List>\r\n                                {documents.map(deleted => (\r\n                                    <ListItem key={deleted._id} sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginTop: '2rem', position: 'relative' }}>\r\n                                        <ListItemAvatar>\r\n                                          <Avatar alt=\"Station Image\" src={deleted.stationImage && deleted.stationImage.url} sx={{ width: 70, height: 70, marginRight: '8px' }} />\r\n                                            <Typography variant=\"body2\" sx={{ position: 'absolute', top: '50px', bottom: '0.3', left: '27px', backgroundColor: 'rgba(0, 0, 0, 0.5)', fontSize: '11px', color: '#fff', padding: '4px 4px', borderRadius: '20px' }}>\r\n                                              {deleted.remainingDays} days\r\n                                            </Typography>\r\n                                         </ListItemAvatar>\r\n                                        <ListItemText\r\n                                            primary={deleted.stationName}\r\n                                            secondary={deleted.siteLocation + '  ' + '| ' + deleted.address}\r\n                                            sx={{ fontFamily: 'Poppins', '& .MuiTypography-root': { fontFamily: 'Poppins' } }}\r\n                                        />\r\n\r\n                                        <Box sx={{ display: 'flex', gap: 1 }}>\r\n                                            <Tooltip title=\"Restore\" style={{ fontFamily: 'Poppins', color: '#333333', backgroundColor: '#c0c0c0' }}>\r\n                                                <IconButton>\r\n                                                    <RestoreOutlinedIcon onClick={() => handleAction('restore', deleted)} />\r\n                                                </IconButton>\r\n                                            </Tooltip>\r\n\r\n                                            <Tooltip title=\"Delete\" style={{ fontFamily: 'Poppins', color: '#C16262', backgroundColor: '#FFE4E4' }}>\r\n                                                <IconButton>\r\n                                                    <DeleteOutlinedIcon onClick={() => handleDelete(deleted.stationName)} />\r\n                                                </IconButton>\r\n                                            </Tooltip>\r\n                                        </Box>\r\n                                    </ListItem>\r\n                                ))}\r\n                            </List>\r\n                        )}\r\n                </Box>\r\n         </Modal>\r\n\r\n            <Modal\r\n                open={confirmationOpen}\r\n                onClose={() => setConfirmationOpen(false)}\r\n                aria-labelledby=\"confirmation-modal-title\"\r\n                aria-describedby=\"confirmation-modal-description\"\r\n                sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', fontFamily: 'Poppins' }}\r\n            >\r\n                <Box sx={{ bgcolor: 'background.paper', boxShadow: 24, borderRadius: 8, p: 4, maxWidth: 400, padding: '3rem' }}>\r\n                    <Typography variant=\"h6\" id=\"confirmation-modal-title\" component=\"h2\" sx={{ fontFamily: 'Poppins', fontWeight: '700' }}>\r\n                        DELETE STATION\r\n                    </Typography>\r\n                    <Typography variant=\"subtitle1\" id=\"confirmation-modal-description\" sx={{ fontFamily: 'Poppins', fontSize: '14px' }}>\r\n                        Are you sure you want to delete this station?\r\n                        Please type <span style={{ fontWeight: '700', color: '#C16262' }}> {selectedRequest} </span> to confirm deletion.\r\n                    </Typography>\r\n                    <TextField\r\n                        label=\"Station Name\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        value={confirmationInput}\r\n                        onChange={handleConfirmationInputChange}\r\n                        sx={{ mt: 2 }}\r\n                    />\r\n                    <Button \r\n                          variant=\"contained\"\r\n                          onClick={handleDeleteConfirmation}\r\n                          disabled={!confirmationInput || confirmationInput !== selectedRequest}\r\n                          sx={{ \r\n                              mt: 2,\r\n                              borderRadius: 10,\r\n                              fontFamily: 'Poppins',\r\n                              fontWeight: '600',\r\n                              boxShadow: 'none',\r\n                              backgroundColor: (!confirmationInput || confirmationInput !== selectedRequest) ? '#F5F5F5' : '#FFE4E4',\r\n                              color: (!confirmationInput || confirmationInput !== selectedRequest) ? '#BDBDBD' : '#C16262',\r\n                              '&:hover': {\r\n                                  backgroundColor: '#FFCFCF', \r\n                                  color: '#C16262',\r\n                              },\r\n                              '&:active': {\r\n                                  backgroundColor: '#C16262', \r\n                                  color: '#FFFFFF',\r\n                              }\r\n                          }}\r\n                      >\r\n                        Delete\r\n                    </Button>\r\n                </Box>\r\n            </Modal>\r\n\r\n    </Container>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport StationView from '../sections/station/view/stationView'\r\n\r\nexport default function Stations() {\r\n  return (\r\n    <div className='station-card-view'>\r\n            \r\n        < StationView/>\r\n    </div>\r\n  )\r\n}\r\n"],"names":["StationCard","station","sx","onDelete","index","other","cover","title","subtitle","useState","isHovered","setIsHovered","renderTitle","Typography","variant","color","fontSize","fontFamily","fontWeight","textTransform","mt","position","content","width","height","top","left","zIndex","transition","backgroundColor","Card","onMouseEnter","onMouseLeave","px","py","borderRadius","cursor","Stack","direction","alignItems","lineHeight","mb","Box","transform","ml","overflow","component","display","background","backgroundSize","backgroundPosition","PendingRequestView","icon","documents","setDocuments","totalCount","setTotalCount","modalOpen","setModalOpen","selectedRequest","setSelectedRequest","confirmationOpen","setConfirmationOpen","useEffect","fetchData","fetch","response","json","data","allDocuments","console","error","intervalId","setInterval","clearInterval","handleAction","action","request","url","_id","fetchAction","handleResponse","method","headers","ok","log","statusText","handleConfirmationClose","handleConfirmationConfirm","length","Grid","container","item","xs","md","Button","onClick","padding","border","justifyContent","marginRight","Modal","open","onClose","bgcolor","boxShadow","p","maxWidth","id","style","List","map","ListItem","marginTop","ListItemAvatar","Avatar","alt","src","stationImage","ListItemText","primary","stationName","secondary","siteLocation","address","gap","Tooltip","IconButton","Check","Clear","Dialog","PaperProps","DialogTitle","DialogContent","DialogContentText","DialogActions","borderTopLeftRadius","borderBottomLeftRadius","flexGrow","borderTopRightRadius","borderBottomRightRadius","autoFocus","TrashBin","opacity","StationView","navigate","useNavigate","stations","setStations","confirmationInput","setConfirmationInput","isLargeScreen","useMediaQuery","fetchStations","documentsWithRemainingDays","document","deletionTimestamp","Date","getTime","currentTimestamp","remainingDays","Math","ceil","handleStationDelete","Error","deleted","handleDeleteConfirmation","Container","className","spacing","marginLeft","marginBottom","sm","lg","state","createdAt","margin","bottom","RestoreOutlined","DeleteOutlined","TextField","label","fullWidth","value","onChange","event","target","disabled","Stations"],"sourceRoot":""}