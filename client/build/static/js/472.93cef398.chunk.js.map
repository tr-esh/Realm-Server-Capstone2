{"version":3,"file":"static/js/472.93cef398.chunk.js","mappings":"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","sources":["sections/monthly/selectedMonthHeader.jsx","sections/monthly/logTable.jsx","sections/monthly/exportButton.jsx","sections/monthly/parameterSort.jsx","sections/monthly/view/selectedMonthView.jsx","pages/MonthlyEntries.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nimport { Card, Box, Grid, Typography, IconButton } from '@mui/material';\r\nimport KeyboardReturnRoundedIcon from '@mui/icons-material/KeyboardReturnRounded';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function SelectedMonthHeader({ title, subtitle, icon, color = 'primary', sx, ...other }) {\r\n    return(\r\n        <Card\r\n            component={Grid}\r\n            container\r\n            spacing={3}\r\n            alignItems=\"center\"\r\n            sx={{\r\n                px: 2,\r\n                py: 4,\r\n                borderRadius: 10,\r\n                ...sx,\r\n            }}\r\n            {...other}\r\n            >\r\n            <Grid item xs={2} sm={1} mt={-2}>\r\n                <Box>\r\n                    <IconButton\r\n                                component={Link}\r\n                                to=\"/logentries\"\r\n                                sx={{   padding: '8px', \r\n                                        border: `1px solid #8CACFF`, \r\n                                        borderRadius: 3,\r\n                                        display: 'flex', \r\n                                        alignItems: 'center',\r\n                                    }}>\r\n                        <KeyboardReturnRoundedIcon sx={{ fontSize: 30, \r\n                                                         color: '#6990f5'}}/> \r\n                    </IconButton>  \r\n                </Box>\r\n            </Grid>\r\n            \r\n            <Grid item xs={10} sm={11}>\r\n                <Box>\r\n                <Typography\r\n                    variant=\"h4\"\r\n                    sx={{\r\n                    fontSize: 50,\r\n                    fontFamily: \"'Arimo', sans-serif\",\r\n                    fontWeight: '700',\r\n                    color: 'white',\r\n                    textTransform: 'uppercase',\r\n                    mt: -4\r\n                    }}\r\n                >\r\n                    {title}\r\n                </Typography>\r\n\r\n                <Typography\r\n                    variant=\"subtitle1\"\r\n                    sx={{\r\n                    color: '#8CACFF',\r\n                    fontSize: 15,\r\n                    fontFamily: 'Poppins',\r\n                    fontWeight: '300',\r\n                    lineHeight: '0.2'\r\n                    }}\r\n                >\r\n                    {subtitle}\r\n                </Typography>\r\n                </Box>\r\n            </Grid>\r\n            </Card>\r\n    )\r\n}\r\n\r\nSelectedMonthHeader.propTypes = {\r\n    color: PropTypes.string,\r\n    icon: PropTypes.oneOfType([PropTypes.element, PropTypes.string]),\r\n    sx: PropTypes.object,\r\n    title: PropTypes.string,\r\n    subtitle: PropTypes.string,\r\n  };","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Card, \r\n         Table, \r\n         TableBody, \r\n         TableContainer, \r\n         TableHead, \r\n         TableCell, \r\n         TableRow, \r\n         TablePagination } from '@mui/material';\r\nimport '../../components/styles/LogTableStyle.css';\r\n\r\nimport { fDateTime } from '../../utils/formatTme';\r\n\r\nfunction TableRowComponent({ tester, paramName, paramValue, createdAt }) {\r\n  return (\r\n    <TableRow>\r\n      <TableCell\r\n        sx={{\r\n          textAlign: 'center',\r\n          borderBottom: 'none',\r\n          color: 'white',\r\n          fontFamily: 'Poppins',\r\n          fontSize: 13,\r\n          fontWeight: 300\r\n        }}\r\n      >\r\n        {tester}\r\n      </TableCell>\r\n      <TableCell\r\n        sx={{\r\n          textAlign: 'center',\r\n          borderBottom: 'none',\r\n          color: 'white',\r\n          fontFamily: 'Poppins',\r\n          fontSize: 13,\r\n          fontWeight: 300\r\n        }}\r\n      >\r\n        {paramName}\r\n      </TableCell>\r\n      <TableCell\r\n        sx={{\r\n          textAlign: 'center',\r\n          borderBottom: 'none',\r\n          color: 'white',\r\n          fontFamily: 'Poppins',\r\n          fontSize: 13,\r\n          fontWeight: 300\r\n        }}\r\n      >\r\n        {paramValue}\r\n      </TableCell>\r\n      <TableCell\r\n        sx={{\r\n          textAlign: 'center',\r\n          borderBottom: 'none',\r\n          color: 'white',\r\n          fontFamily: 'Poppins',\r\n          fontSize: 13,\r\n          fontWeight: 300\r\n        }}\r\n      >\r\n        {fDateTime(createdAt)}\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n}\r\n\r\nTableRowComponent.propTypes = {\r\n  tester: PropTypes.string,\r\n  paramName: PropTypes.string,\r\n  paramValue: PropTypes.string,\r\n  date: PropTypes.instanceOf(Date),\r\n};\r\n\r\nexport default function LogTable({ title, subheader, list, sx, ...other }) {\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <Card\r\n      spacing={3}\r\n      sx={{\r\n        px: 4,\r\n        py: 4,\r\n        overflowX: 'hidden',\r\n        ...sx,\r\n      }}\r\n      {...other}\r\n    >\r\n      <div className=\"custom-table\">\r\n        <TableContainer\r\n          sx={{\r\n            \"& th\": {\r\n              color: \"#0A1929\",\r\n              fontFamily: \"Archivo, 'sans-serif'\" ,\r\n              fontSize: 15,\r\n              fontWeight: '600',\r\n              backgroundColor: \"#8CACFF\",\r\n              position: 'sticky',\r\n              top: 0,\r\n            },\r\n            \"&::-webkit-scrollbar\": {\r\n              display: 'none',\r\n            },\r\n          }}\r\n          style={{ overflowY: 'auto' }}\r\n        >\r\n          <Table style={{ width: '100%',  \r\n                        borderSpacing: '0 15px',\r\n                        textAlign: 'center' }} >\r\n            <TableHead>\r\n              <TableRow>\r\n                  <TableCell \r\n                      sx={{ textAlign: 'center', \r\n                            borderBottom: 'none', \r\n                            }}\r\n                      >\r\n                          Tester\r\n                  </TableCell>\r\n                  <TableCell \r\n                      sx={{ textAlign: 'center', \r\n                            borderBottom: 'none'}}\r\n                      >\r\n                        Parameter Name\r\n                  </TableCell>\r\n                  <TableCell \r\n                      sx={{ textAlign: 'center', \r\n                            borderBottom: 'none'}}\r\n                      >\r\n                        Value\r\n                  </TableCell>\r\n                  <TableCell \r\n                      sx={{ textAlign: 'center', \r\n                            borderBottom: 'none'}}\r\n                      >\r\n                        Date\r\n                  </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {list &&\r\n                list.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((item) => (\r\n                  <TableRowComponent key={item.id} {...item} />\r\n                ))}\r\n            </TableBody>\r\n          </Table>\r\n          <TablePagination\r\n            style={{ color: 'white' }}\r\n            rowsPerPageOptions={[10, 25, 45, 50]}\r\n            component=\"div\"\r\n            rowsPerPage={rowsPerPage}\r\n            page={page}\r\n            count={list ? list.length : 0}\r\n            onPageChange={handleChangePage}\r\n            onRowsPerPageChange={handleChangeRowsPerPage}\r\n          />\r\n        </TableContainer>\r\n      </div>\r\n    </Card>\r\n  );\r\n}\r\n\r\nLogTable.propTypes = {\r\n  list: PropTypes.array,\r\n  subheader: PropTypes.string,\r\n  title: PropTypes.string,\r\n  sx: PropTypes.object,\r\n};\r\n\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button, Tooltip } from \"@mui/material\";\r\n\r\nexport default function ExportButton({ onClick, sx, ...other }) {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const handleClick = (event) => {\r\n        // Call the external onClick function if it exists\r\n        if(onClick) {\r\n            onClick();\r\n        }\r\n\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    \r\n\r\n    return (\r\n        <>\r\n          <Tooltip title=\"Export station report in XLSX format\">\r\n            <Button \r\n                aria-controls=\"simple-menu\" \r\n                aria-haspopup=\"true\" \r\n                onClick={handleClick}\r\n                sx={{\r\n                    backgroundColor: 'transparent',\r\n                    '&:hover': { \r\n                        backgroundColor: '#8CACFF',\r\n                        opacity: 0.8,\r\n                        color: '#0A1929'\r\n                    },\r\n                    borderRadius: 5,\r\n                    color: 'white',\r\n                    width: 150, \r\n                    height: 45, \r\n                    fontSize: '0.8rem',\r\n                    fontWeight: '500',\r\n                    fontFamily: 'Poppins',\r\n                    border: '1px solid #8CACFF'\r\n                }}\r\n            >\r\n                Export Data\r\n            </Button>\r\n         </Tooltip>     \r\n       </>\r\n    );\r\n  }\r\n\r\n  ExportButton.propTypes = {\r\n    onClick: PropTypes.func,\r\n    sx: PropTypes.object,\r\n};","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button, Menu, MenuItem } from \"@mui/material\";\r\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\r\n\r\nexport default function ParameterSort({ options, onSort, sx, ...other}) {\r\n\r\n    const [parameterdetail, setParameterDetail] = useState('Temperature');\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n      \r\n    const handleClose = (value) => {\r\n        setAnchorEl(null);\r\n        if (value) {\r\n            setParameterDetail(value.label);\r\n            // Call the onSort function with the selected value if needed\r\n            if (onSort) {\r\n                onSort(value.value);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button \r\n                aria-controls=\"simple-menu\" \r\n                aria-haspopup=\"true\" \r\n                onClick={handleClick}\r\n                endIcon={<ArrowDropDownIcon />} \r\n                sx={{\r\n                    backgroundColor: 'transparent',\r\n                    '&:hover': { \r\n                        backgroundColor: '#8CACFF',\r\n                        opacity: 0.8,\r\n                        color: '#0A1929'\r\n                    },\r\n                    borderRadius: 5,\r\n                    color: 'white',\r\n                    width: 150, \r\n                    height: 45, \r\n                    fontSize: '0.8rem',\r\n                    fontWeight: '500',\r\n                    fontFamily: 'Poppins',\r\n                    border: '1px solid #0A1929'\r\n                }}\r\n            >\r\n                {parameterdetail}\r\n            </Button>\r\n                <Menu\r\n                    id=\"simple-menu\"\r\n                    anchorEl={anchorEl}\r\n                    keepMounted\r\n                    open={Boolean(anchorEl)}\r\n                    onClose={() => handleClose(null)}\r\n                    sx={{\r\n                        '.MuiPaper-root': {\r\n                            backgroundColor: 'rgba(13, 33, 53, 0.32)', \r\n                            boxShadow: '0 4px 30px rgba(0, 0, 0, 0.1)',\r\n                            backdropFilter: 'blur(5px)',\r\n                            WebkitBackdropFilter: 'blur(5px)',\r\n                            color: 'white',\r\n                            fontSize: '0.5rem',\r\n                            fontFamily: \"'Archivo', sans-serif\",\r\n                        },\r\n                        '.MuiMenuItem-root': {\r\n                            fontSize: '0.8rem', \r\n                            fontFamily: \"'Archivo', sans-serif\"\r\n                        }\r\n                    }}\r\n                >\r\n                {options.map((option) => (\r\n                    <MenuItem key={option.value} onClick={() => handleClose(option)}>\r\n                        {option.label}\r\n                    </MenuItem>\r\n                ))}\r\n            </Menu>\r\n        </>\r\n    );\r\n  }\r\n\r\nParameterSort.propTypes = {\r\n    options: PropTypes.array,\r\n    onSort: PropTypes.func,\r\n    sx: PropTypes.object,\r\n};","import React, { useState, useEffect } from 'react';\r\nimport { Container, Grid, Stack } from \"@mui/material\";\r\nimport SelectedMonthHeader from '../selectedMonthHeader';\r\nimport { useParams } from 'react-router-dom';\r\nimport LogTable from '../logTable';\r\nimport ExportButton from '../exportButton';\r\nimport ParameterSort from '../parameterSort';\r\nimport * as writeXLSX from 'xlsx';\r\n\r\nexport default function SelectedMonthView() {\r\n    const { stationId, month, year } = useParams();\r\n    console.log('Params:', stationId, month, year);\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [monthlyData, setMonthlyData] = useState([]);\r\n    const [selectedParam, setSelectedParam] = useState('temperature');\r\n    const [filteredDataForTable, setFilteredDataForTable] = useState([]);\r\n    const [error, setError] = useState('');\r\n\r\n    const monthNames = [\r\n        'January', 'February', 'March', 'April', 'May', 'June',\r\n        'July', 'August', 'September', 'October', 'November', 'December'\r\n    ];\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                setLoading(true);\r\n                const response = await fetch(`/api/realm/monthlyData/${stationId}`);\r\n                const data = await response.json();\r\n    \r\n                console.log('Fetched data:', data);\r\n    \r\n                // Convert month string to numeric format\r\n                let monthNumeric = 0; // Default value if month is not recognized\r\n                const monthIndex = monthNames.indexOf(month);\r\n                if (monthIndex !== -1) {\r\n                    monthNumeric = monthIndex + 1;\r\n                } else {\r\n                    console.error('Invalid month parameter:', month);\r\n                }\r\n    \r\n                // Filter data based on the selected month and year\r\n                const filteredData = data.filter(entry => {\r\n                    const entryDate = new Date(entry.createdAt);\r\n                    const entryMonth = entryDate.getUTCMonth() + 1;\r\n                    const entryYear = entryDate.getUTCFullYear();\r\n                    return entryMonth === monthNumeric && entryYear === parseInt(year);\r\n                });\r\n    \r\n                console.log('Filtered data:', filteredData);\r\n    \r\n                // Update state with the filtered data\r\n                setMonthlyData(filteredData);\r\n            } catch (error) {\r\n                setError('Error fetching monthly data');\r\n                console.error('Error fetching monthly data:', error);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n    \r\n        fetchData();\r\n    }, [stationId, month, year]);\r\n    \r\n\r\n    useEffect(() => {\r\n        if (monthlyData.length > 0) { // Ensure monthlyData is available\r\n            const filteredData = monthlyData.filter(data => data.paramName === selectedParam);\r\n            setFilteredDataForTable(filteredData);\r\n        }\r\n    }, [monthlyData, selectedParam]);\r\n\r\n    const handleSortChange = (param) => {\r\n        setSelectedParam(param);\r\n    };\r\n\r\n    const handleExport = (monthName) => {\r\n        console.log('Monthly Data:', monthlyData);\r\n        console.log('Month Name:', monthName);\r\n    \r\n        const mappedData = monthlyData.map(({ tester, paramName, paramValue, createdAt }) => ({\r\n            stationId: stationId,\r\n            tester,\r\n            paramName,\r\n            paramValue,\r\n            createdAt: new Date(createdAt).toLocaleString('en-PH', {\r\n                year: 'numeric',\r\n                month: '2-digit',\r\n                day: '2-digit',\r\n                hour: '2-digit',\r\n                minute: '2-digit',\r\n            }),\r\n        }));\r\n    \r\n        console.log('Mapped Data:', mappedData);\r\n    \r\n        const wb = writeXLSX.utils.book_new();\r\n    \r\n        // No need to filter by paramName here as we're exporting all data\r\n        const tempSheet = writeXLSX.utils.json_to_sheet(mappedData.filter(({ paramName }) => paramName === 'temperature'));\r\n        const turbidSheet = writeXLSX.utils.json_to_sheet(mappedData.filter(({ paramName }) => paramName === 'turbidity'));\r\n        const phSheet = writeXLSX.utils.json_to_sheet(mappedData.filter(({ paramName }) => paramName === 'pH'));\r\n    \r\n        writeXLSX.utils.book_append_sheet(wb, tempSheet, 'Temperature');\r\n        writeXLSX.utils.book_append_sheet(wb, turbidSheet, 'Turbidity');\r\n        writeXLSX.utils.book_append_sheet(wb, phSheet, 'pH');\r\n    \r\n        const wbout = writeXLSX.write(wb, { type: 'binary', bookType: 'xlsx' });\r\n    \r\n        const fileName = `${stationId}_${monthName.toLowerCase()}_logs.xlsx`;\r\n        const blob = new Blob([s2ab(wbout)], { type: 'application/octet-stream' });\r\n    \r\n        const link = document.createElement('a');\r\n        link.href = URL.createObjectURL(blob);\r\n        link.download = fileName;\r\n        link.click();\r\n    };\r\n    \r\n    function s2ab(s) {\r\n        const buf = new ArrayBuffer(s.length);\r\n        const view = new Uint8Array(buf);\r\n        for (let i = 0; i !== s.length; ++i) view[i] = s.charCodeAt(i) & 0xff;\r\n        return buf;\r\n    }\r\n    \r\n\r\n    return (\r\n        <Container maxWidth=\"lg\">\r\n            <Grid container mt={5}>\r\n                <Grid item xs={12} sm={12} md={12} ml={3}>\r\n                    <SelectedMonthHeader\r\n                        sx={{\r\n                        backgroundColor: '#0A1929'\r\n                        }}\r\n                        title={`${month.charAt(0).toUpperCase() + month.slice(1)} Logs`}\r\n                        subtitle=\"Never miss a beat with our log tracking solution.\"\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={12} md={12} mt={6} mb={2} ml={1}>   \r\n                    <ParameterSort \r\n                        options={[\r\n                            { value: 'turbidity', label: 'Turbidity' },\r\n                            { value: 'temperature', label: 'Temperature' },\r\n                            { value: 'pH', label: 'pH' },\r\n                        ]}\r\n                        onSort={handleSortChange} // Passing the handler to ParameterSort\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid container spacing={4} mb={2}>\r\n                    <Grid item xs={12} sm={12} md={12}>\r\n                        <LogTable \r\n                            sx={{\r\n                                backgroundColor: '#10273d',\r\n                                borderRadius: 10,\r\n                            }}\r\n                            list={filteredDataForTable}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid container mt={3} spacing={4} mb={2}>\r\n                    <Grid item xs={12}>\r\n                        <Stack\r\n                        direction=\"row\"\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"flex-end\"\r\n                        spacing={2}\r\n                        >\r\n                          <ExportButton onClick={() => handleExport(month.charAt(0).toUpperCase() + month.slice(1))} />\r\n                        </Stack>\r\n                    </Grid>\r\n                </Grid>\r\n    \r\n            </Grid>\r\n        </Container>\r\n    )\r\n}","import React from 'react'\r\nimport SelectedMonthView from '../sections/monthly/view/selectedMonthView'\r\n\r\n\r\nexport default function MonthlyEntries () {\r\n    return (\r\n        <div>\r\n            <SelectedMonthView />\r\n        </div>\r\n    )\r\n}"],"names":["SelectedMonthHeader","title","subtitle","sx","icon","color","other","Card","component","Grid","container","spacing","alignItems","px","py","borderRadius","item","xs","sm","mt","Box","IconButton","Link","to","padding","border","display","KeyboardReturnRounded","fontSize","Typography","variant","fontFamily","fontWeight","textTransform","lineHeight","TableRowComponent","tester","paramName","paramValue","createdAt","TableRow","TableCell","textAlign","borderBottom","fDateTime","LogTable","subheader","list","useState","page","setPage","rowsPerPage","setRowsPerPage","overflowX","className","TableContainer","backgroundColor","position","top","style","overflowY","Table","width","borderSpacing","TableHead","TableBody","slice","map","id","TablePagination","rowsPerPageOptions","count","length","onPageChange","event","newPage","onRowsPerPageChange","parseInt","target","value","ExportButton","onClick","setAnchorEl","Tooltip","Button","currentTarget","opacity","height","ParameterSort","options","onSort","parameterdetail","setParameterDetail","anchorEl","handleClose","label","endIcon","ArrowDropDown","Menu","keepMounted","open","Boolean","onClose","boxShadow","backdropFilter","WebkitBackdropFilter","option","MenuItem","SelectedMonthView","useParams","stationId","month","year","console","log","setLoading","monthlyData","setMonthlyData","selectedParam","setSelectedParam","filteredDataForTable","setFilteredDataForTable","setError","monthNames","useEffect","fetchData","fetch","response","json","data","monthNumeric","monthIndex","indexOf","error","filteredData","filter","entry","entryDate","Date","entryMonth","getUTCMonth","entryYear","getUTCFullYear","s2ab","s","buf","ArrayBuffer","view","Uint8Array","i","charCodeAt","Container","maxWidth","md","ml","charAt","toUpperCase","mb","param","Stack","direction","justifyContent","monthName","mappedData","toLocaleString","day","hour","minute","wb","writeXLSX","tempSheet","turbidSheet","phSheet","wbout","type","bookType","fileName","toLowerCase","blob","Blob","link","document","createElement","href","URL","createObjectURL","download","click","handleExport","MonthlyEntries"],"sourceRoot":""}