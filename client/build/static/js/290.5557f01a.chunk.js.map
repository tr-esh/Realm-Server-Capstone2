{"version":3,"file":"static/js/290.5557f01a.chunk.js","mappings":"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","sources":["sections/MOSection/stations/stationViewHeader.jsx","sections/MOSection/stations/stationParameterCard.jsx","sections/MOSection/stations/view/viewPerStation.jsx","pages/MOStationSection.jsx","sections/MOSection/stations/stationActivityTable.jsx","../node_modules/@mui/material/CircularProgress/circularProgressClasses.js","../node_modules/@mui/material/CircularProgress/CircularProgress.js"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Grid, Stack, Typography, Box, CircularProgress } from '@mui/material';\r\n\r\nexport default function StationViewHeader({ title, info, subtitle, progress, color = 'primary', sx, ...other }) {\r\n  const renderProgress = (\r\n    <Grid\r\n      item\r\n      xs={12}\r\n      md={4}\r\n      sx={{\r\n        bgcolor: '#03182f',\r\n        borderRadius: { xs: '45px 45px 0 0', md: '45px 0 0 45px' },\r\n        p: 5,\r\n      }}\r\n    >\r\n      <Box\r\n        sx={{\r\n          position: 'relative',\r\n          width: '100%',\r\n          height: '100%',\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n        }}\r\n      >\r\n        <CircularProgress\r\n          variant=\"determinate\"\r\n          value={progress}\r\n          size={200}\r\n          thickness={5} // Adjust the thickness as needed\r\n          sx={{\r\n            width: '100%',\r\n            height: '100%',\r\n            borderRadius: '80%',\r\n            position: 'relative',\r\n            color: '#8cacff',\r\n            zIndex: 2,\r\n          }}\r\n        />\r\n        <CircularProgress\r\n          variant=\"determinate\"\r\n          value={100}\r\n          size={200}\r\n          thickness={5} // Adjust the thickness as needed\r\n          sx={{\r\n            color: 'rgba(255, 255, 255, 0.1)', // Adjust the color of the track as needed\r\n            borderRadius: '50%',\r\n            position: 'absolute',\r\n            zIndex: 1,\r\n          }}\r\n        />\r\n        {/* Display the value at the center */}\r\n        <Typography\r\n          variant=\"h4\"\r\n          sx={{\r\n            fontSize: 24,\r\n            fontFamily: \"Archivo, 'sans-serif'\",\r\n            fontWeight: '700',\r\n            color: '#8CACFF',\r\n            position: 'absolute',\r\n            zIndex: 3,\r\n          }}\r\n        >\r\n          {progress}%\r\n          <Typography\r\n            variant=\"body2\"\r\n            sx={{\r\n              fontSize: 13,\r\n              fontFamily: \"Poppins\",\r\n              fontWeight: '300',\r\n              color: 'white',\r\n              textAlign: 'center'\r\n            }}\r\n          >\r\n            WQI\r\n          </Typography>\r\n        </Typography>\r\n      </Box>\r\n    </Grid>\r\n  );\r\n\r\n  const renderDetails = (\r\n    <Grid\r\n      item\r\n      xs={12}\r\n      md={8}\r\n      sx={{\r\n        bgcolor: '#001227',\r\n        borderRadius: { xs: '0 0 45px 45px', md: '0 45px 45px 0' },\r\n        p: 5,\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        flexDirection: 'column',\r\n      }}\r\n    >\r\n      <Box sx={{ maxWidth: '400px', width: '100%' }}>\r\n        {/* Content of renderDetails */}\r\n        <Stack spacing={2}>\r\n          <Typography\r\n            variant=\"h4\"\r\n            sx={{\r\n              fontSize: 15,\r\n              fontFamily: \"Archivo, 'sans-serif'\",\r\n              fontWeight: '600',\r\n              color: '#1a56bb',\r\n              textTransform: 'uppercase',\r\n              backgroundColor: '#051e68',\r\n              width: '100%', // Adjusted width\r\n              height: '2.5rem',\r\n              display: 'flex',\r\n              borderRadius: '2rem',\r\n              textAlign: 'center',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              marginTop: '2rem',\r\n            }}\r\n          >\r\n            {title}\r\n          </Typography>\r\n          <Typography\r\n            variant=\"h4\"\r\n            sx={{\r\n              fontSize: 55,\r\n              fontFamily: \"Poppins\",\r\n              fontWeight: '700',\r\n              color: '#8CACFF',\r\n              textTransform: 'uppercase',\r\n              marginTop: '1rem',\r\n            }}\r\n          >\r\n            {info}\r\n          </Typography>\r\n          <Typography\r\n            variant=\"body2\"\r\n            sx={{\r\n              fontSize: 13,\r\n              fontFamily: \"Archivo, 'sans-serif'\",\r\n              fontWeight: '300',\r\n              color: 'white',\r\n            }}\r\n          >\r\n            {subtitle}\r\n          </Typography>\r\n        </Stack>\r\n      </Box>\r\n    </Grid>\r\n  );\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      spacing={0}\r\n      sx={{\r\n        backgroundColor: 'transparent',\r\n        boxShadow: 'none',\r\n        ...sx,\r\n      }}\r\n      {...other}\r\n    >\r\n      {renderProgress}\r\n      {renderDetails}\r\n    </Grid>\r\n  );\r\n}\r\n\r\n\r\nStationViewHeader.propTypes = {\r\n  color: PropTypes.string,\r\n  sx: PropTypes.object,\r\n  title: PropTypes.string.isRequired,\r\n  info: PropTypes.string.isRequired,\r\n  subtitle: PropTypes.string.isRequired,\r\n  progress: PropTypes.number.isRequired, // Progress value for the CircularProgress\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport Card from '@mui/material/Card';\r\nimport Stack from '@mui/material/Stack';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nexport default function StationParameterCard({parameterValue, parameterName, parameterScript, unit, sx, ...other}) {\r\n    return(\r\n        <Card\r\n            spacing={3}\r\n            sx={{\r\n            px: 4,\r\n            py: 4,\r\n            borderRadius: 12,\r\n            ...sx,\r\n            }}\r\n            {...other}\r\n        >\r\n            <Stack direction=\"column\" alignItems=\"center\">\r\n\r\n                <Typography variant=\"h5\"\r\n                    sx={{ color: '#8cacff',\r\n                        fontSize:  30,\r\n                        fontFamily: \"'Raleway', sans-serif\", \r\n                        fontWeight: '600',\r\n                    }}\r\n                 >\r\n                    {parameterName}\r\n                </Typography>\r\n\r\n                <Typography variant=\"h6\"\r\n                    sx={{ fontSize: 13,\r\n                        fontFamily: \"Archivo, 'sans-serif'\",\r\n                        fontWeight: '500',\r\n                        color: '#1a56bb',\r\n                        textTransform: 'uppercase',\r\n                        backgroundColor: '#051e68',\r\n                        width: '14rem', \r\n                        height: '1.7rem',\r\n                        display: 'flex',\r\n                        borderRadius: '2rem',\r\n                        textAlign: 'center',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'center',\r\n                        \r\n                        \r\n                    }}\r\n                 >\r\n                    {parameterScript}\r\n                </Typography>\r\n\r\n                <Typography variant=\"h2\"\r\n                    sx={{\r\n                        color: '#8cacff',\r\n                        fontFamily: \"Poppins\",\r\n                        fontWeight: '500',\r\n                        textTransform: 'uppercase',\r\n                      }}\r\n                 >\r\n                    {parameterValue}\r\n                    <span\r\n                        style={{\r\n                        fontSize: 30, // Adjust the font size as needed\r\n                        marginLeft: '0.2em', // Add some space between parameterValue and unit\r\n                        }}\r\n                    >\r\n                        {unit}\r\n                    </span>\r\n                </Typography>\r\n\r\n            </Stack>\r\n\r\n        </Card>\r\n    )\r\n}\r\n\r\nStationParameterCard.propTypes = {\r\n    parameterValue: PropTypes.number.isRequired,\r\n    parameterName: PropTypes.string.isRequired,\r\n    parameterScript: PropTypes.string.isRequired,\r\n    unit: PropTypes.string.isRequired,\r\n    sx: PropTypes.object,\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { useLocation, useParams } from 'react-router-dom';\r\nimport { Container, Grid, Button, Typography } from \"@mui/material\";\r\nimport StationViewHeader from \"../stationViewHeader\";\r\n\r\nimport StationParameterCard from '../stationParameterCard';\r\nimport StationActivityTable from '../stationActivityTable';\r\nimport { useAuthContext } from '../../../../hooks/useAuthContext';\r\n\r\nexport default function ViewPerStation () {\r\n    const location = useLocation();\r\n    const { state: { title, stationName }} = location;\r\n    const { user } = useAuthContext();\r\n    const { stationId } = useParams();\r\n    console.log('Params:', stationId );\r\n\r\n    \r\n    const [stationDetails, setStationDetails] = useState({\r\n        title: title || 'Default Title',\r\n        info: '',\r\n        subtitle: '',\r\n        progress: 0\r\n    });\r\n\r\n    const [selectedStation, setSelectedStation] = useState(stationName);\r\n    const [tester, setTester] = useState(user.username);\r\n    const [parameterData, setParameterData] = useState([]);\r\n\r\n    const [activityStationLogs, setActivityStationLogs] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const [activityLogsResponse, stationLogsResponse] = await Promise.all([\r\n                    fetch(`/api/realm/activityLogs/${stationId}`),\r\n                    fetch(`/api/realm/stationLogs/${stationId}`)\r\n                ]);\r\n    \r\n                if (!activityLogsResponse.ok || !stationLogsResponse.ok) {\r\n                    throw new Error('Failed to fetch logs');\r\n                }\r\n    \r\n                const activityLogsData = await activityLogsResponse.json();\r\n                const stationLogsData = await stationLogsResponse.json();\r\n    \r\n                // Combine activity logs and station logs\r\n                const combinedLogs = [...activityLogsData.logs, ...stationLogsData.logs];\r\n    \r\n                // Sort the combined logs by date in descending order\r\n                combinedLogs.sort((a, b) => new Date(b.dateAdded) - new Date(a.dateAdded));\r\n    \r\n                setActivityStationLogs(combinedLogs);\r\n            } catch (error) {\r\n                console.error('Error fetching logs:', error);\r\n            }\r\n        };\r\n    \r\n        fetchData();\r\n    }, [stationId]);\r\n\r\n    useEffect(() => {\r\n        const fetchStationData = async () => {\r\n          try {\r\n            const response = await fetch(`/api/realm/calculateWQI`);\r\n            if (!response.ok) throw new Error('Failed to fetch station data');\r\n            const data = await response.json();\r\n            if (data[stationId]) {\r\n              \r\n              // Assuming you still want to calculate and update station details based on the latest entry\r\n              const latestEntry = Object.values(data[stationId]).pop();\r\n              const percentageChange = ((latestEntry.wqi - data[stationId][Object.keys(data[stationId])[0]].wqi) / data[stationId][Object.keys(data[stationId])[0]].wqi) * 100;\r\n              const changeType = percentageChange > 0 ? 'increased' : 'decreased';\r\n              setStationDetails({\r\n                ...stationDetails,\r\n                info: latestEntry.status,\r\n                subtitle: ` ${stationId} is interpreted as ${latestEntry.status} with a WQI result ${latestEntry.wqi.toFixed(2)} ${changeType} by ${Math.abs(percentageChange).toFixed(2)}% since ${new Date(latestEntry.date).toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}`,\r\n                progress: parseFloat(latestEntry.wqi.toFixed(2))\r\n              });\r\n            } else {\r\n              console.error('Station data not found');\r\n            }\r\n          } catch (error) {\r\n            console.error('Error fetching station data:', error);\r\n          }\r\n        };\r\n    \r\n        fetchStationData();\r\n      }, [stationId]); // Fetch data whenever stationId changes\r\n\r\n    useEffect(() => {\r\n        const fetchParameterData = async () => {\r\n            try {\r\n                const response = await fetch(`/api/realm/latestStationReadings/${encodeURIComponent(selectedStation)}`);\r\n                const data = await response.json();\r\n    \r\n                console.log('Fetched data:', data); // Log the data received from the API\r\n    \r\n                if (response.status === 200) {\r\n                    setParameterData(data);\r\n                } else {\r\n                    console.error('Failed to fetch parameter data:', data.error);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error during parameter data fetch:', error.message);\r\n            }\r\n        };\r\n    \r\n        fetchParameterData();\r\n    }, [selectedStation]);\r\n\r\n    let lastUserId;\r\n    const handleInitializeData = async () => {\r\n      try {\r\n        // Check if both station and tester are selected\r\n        if (!selectedStation || !tester) {\r\n          console.error('Please select Station Name and Tester Name');\r\n          return;\r\n        }\r\n    \r\n        // Send initialization request to the backend\r\n        const response = await fetch('/api/realm/startMonitoring', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            stationName: selectedStation,\r\n            tester: tester,\r\n          }),\r\n        });\r\n    \r\n        const data = await response.json();\r\n        console.log(data.message);\r\n    \r\n        // If the startMonitoring operation was successful, store the user ID\r\n        if (response.status === 201) {\r\n          lastUserId = data.userId; // Assuming your server returns the created user ID\r\n        }\r\n      } catch (error) {\r\n        // Handle errors during initialization\r\n        console.error('Error during initialization:', error.message);\r\n      }\r\n    };    \r\n\r\n    const handleTerminateData = async () => {\r\n      try {\r\n        const response = await fetch('/api/realm/deleteUserData', {\r\n          method: 'DELETE'\r\n        });\r\n    \r\n        const data = await response.json();\r\n        console.log(data.message); // log the response message\r\n    \r\n      } catch (error) {\r\n        console.error('Error:', error.message);\r\n      }\r\n    };\r\n\r\n    const progressData = [\r\n        { name: 'progress', value: 42.4 }, // Replace with the actual progress value\r\n    ];\r\n\r\n    return(\r\n        <Container maxWidth=\"lg\">\r\n            <Grid container spacing={5} mt={2}>\r\n                \r\n                <Grid item xs={12} sm={12} md={12}>\r\n                    <StationViewHeader\r\n                        title={stationDetails.info}\r\n                        info={stationDetails.title}\r\n                        subtitle={stationDetails.subtitle}\r\n                        progress={stationDetails.progress}\r\n                       \r\n                     />\r\n                </Grid>\r\n\r\n                <Grid item container xs={12} sm={12} md={12} justifyContent=\"flex-start\" alignItems=\"center\" ml={1}>\r\n                    <Grid item xs={12} sm={12} md={6} mb={3}>\r\n                        <div>\r\n                            <span style={{\r\n                                color: 'white',\r\n                                fontFamily: \"'Arimo', sans-serif\",\r\n                                fontWeight: 500,\r\n                                fontSize: 20,\r\n                                textTransform: 'uppercase',\r\n                                marginLeft: 2\r\n                            }}>\r\n                                Monitored\r\n                            </span>\r\n                            <span style={{\r\n                                color: '#8cacff',\r\n                                fontFamily: \"'Arimo', sans-serif\",\r\n                                fontWeight: 500,\r\n                                fontSize: 20,\r\n                                textTransform: 'uppercase',\r\n                                marginLeft: 4\r\n                            }}>\r\n                                Physicochemical Parameters\r\n                            </span>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={6} container justifyContent=\"flex-end\">\r\n                        <Button variant=\"contained\"\r\n                            onClick={handleInitializeData}\r\n                            sx={{\r\n                                borderRadius: 10,\r\n                                backgroundColor: '#8cacff',\r\n                                marginRight: 1,\r\n                                fontFamily: \"Poppins\", \r\n                                color: '#001227'\r\n                            }}\r\n                        >\r\n                            Start Monitoring\r\n                        </Button>\r\n                        <Button variant=\"contained\"\r\n                            onClick={handleTerminateData}\r\n                            sx={{\r\n                                borderRadius: 10,\r\n                                backgroundColor: '#8cacff',\r\n                                fontFamily: \"Poppins\",\r\n                                color: '#001227'\r\n                            }}\r\n                        >\r\n                            Terminate\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                {parameterData && Object.keys(parameterData).length > 0 ? (\r\n                    Object.entries(parameterData).map(([parameterName, parameter]) => (\r\n                        <Grid item key={parameterName} xs={12} sm={4} md={4}>\r\n                            <StationParameterCard\r\n                            sx={{ backgroundColor: '#001227' }}\r\n                            parameterName={parameter.paramName}\r\n                            parameterScript={parameter.parameterScript}\r\n                            parameterValue={parameter.paramValue}\r\n                            unit={parameter.unit}\r\n                            />\r\n                        </Grid>\r\n                        ))\r\n                    ) : (\r\n                        <Grid item xs={12} sm={12} md={12} mt={5} height={150}>\r\n                            <Typography variant=\"h6\" \r\n                                        color=\"textSecondary\" \r\n                                        align=\"center\"\r\n                                        sx={{ fontFamily: 'Poppins',\r\n                                              fontWeight: '200',\r\n                                              color: '#8cacff',\r\n                                              opacity: '75%' }}>\r\n                                No parameter data available\r\n                            </Typography>\r\n                        </Grid>\r\n                    )}\r\n\r\n                <Grid item xs={12} sm={12} md={12} mt={4}\r\n                      style={{ display:'flex', flexDirection: 'column' }}>\r\n                        <span style={{ color: 'white', \r\n                                        fontFamily: \"'Arimo', sans-serif\", \r\n                                        fontWeight: 500,\r\n                                        fontSize: 25, \r\n                                        textTransform: 'uppercase',\r\n                                        marginLeft: 8\r\n                              }}\r\n                          >\r\n                            Latest Station Activity\r\n                        </span>\r\n                        <span style={{ color: '#8CACFF', \r\n                                        fontFamily: \"Poppins\", \r\n                                        fontWeight: 300,\r\n                                        fontSize: 13, \r\n                                        marginLeft: 8\r\n                            }}\r\n                          >\r\n                            Review the recent station activities that have taken place\r\n                        </span>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={12} md={12}>\r\n                    <StationActivityTable\r\n                        sx={{\r\n                        backgroundColor: '#0d2135',\r\n                        boxShadow: 'none',\r\n                        margin: 0,\r\n                        padding: 0\r\n                        }}\r\n                        list={activityStationLogs.map(log => ({\r\n                            id: log._id,\r\n                            tester: log.tester,\r\n                            dateAdded: log.dateAdded,\r\n                            status: log.status,\r\n                        }))}  \r\n                    />\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}","import ViewPerStation from \"../sections/MOSection/stations/view/viewPerStation\"\r\n\r\nexport default function MOStationSection() {\r\n    return(\r\n        <div>\r\n            <ViewPerStation />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Card, Table, TableHead, TableBody, TableRow, TableCell, Paper } from '@mui/material';\r\nimport { fDateTime } from '../../../utils/formatTme'; // Adjust the path according to your project structure\r\n\r\nexport default function StationActivityTable({ title, subheader, list, sx, ...other }) {\r\n  return (\r\n    <Card spacing={3} sx={{ px: 4, py: 4, overflowX: 'auto', ...sx }} {...other}>\r\n      <Paper sx={{ borderRadius: '15px', overflow: 'hidden', backgroundColor: 'transparent', boxShadow: 'none' }}>\r\n        <Table>\r\n          <TableHead style={{ backgroundColor: '#001227', color: 'white', fontWeight: 600 }}>\r\n            <TableRow>\r\n              <TableCell align=\"center\" sx={{ color: '#8cacff', fontWeight: 600, fontFamily: 'Poppins', borderBottom: 'none' }}>Tester</TableCell>\r\n              <TableCell align=\"center\" sx={{ color: '#8cacff', fontWeight: 600, fontFamily: 'Poppins', borderBottom: 'none' }}>Date</TableCell>\r\n              <TableCell align=\"center\" sx={{ color: '#8cacff', fontWeight: 600, fontFamily: 'Poppins', borderBottom: 'none' }}>Status</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {list.map((item, index) => (\r\n              <TableRow key={item.id || index}>\r\n                <TableCell align=\"center\" sx={{ borderBottom: '1px solid #03324e', color: '#8cacff', fontFamily: 'Poppins', fontWeight: '700' }}>{item.tester}</TableCell>\r\n                <TableCell align=\"center\" sx={{ borderBottom: '1px solid #03324e', color: '#8cacff', fontFamily: 'Poppins' }}>{fDateTime(item.dateAdded)}</TableCell>\r\n                <TableCell align=\"center\" sx={{ borderBottom: '1px solid #03324e', color: '#8cacff', fontFamily: 'Poppins' }}>\r\n                  <span\r\n                    style={{\r\n                      backgroundColor: getStatusBackgroundColor(item.status),\r\n                      color: getStatusFontColor(item.status),\r\n                      padding: '0.5rem',\r\n                      fontWeight: '700',\r\n                      borderRadius: '3rem',\r\n                      fontFamily: 'Poppins'\r\n                    }}\r\n                  >\r\n                    {item.status}\r\n                  </span>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </Paper>\r\n    </Card>\r\n  );\r\n}\r\n\r\nStationActivityTable.propTypes = {\r\n  list: PropTypes.array,\r\n  subheader: PropTypes.string,\r\n  title: PropTypes.string,\r\n  sx: PropTypes.object,\r\n};\r\n\r\nfunction getStatusBackgroundColor(status) {\r\n  switch (status) {\r\n    case 'Added':\r\n      return '#74a7f7';\r\n    case 'Monitored':\r\n      return '#ffff80';\r\n    case 'Recently Monitored':\r\n      return '#a1e6a6';\r\n    default:\r\n      return 'transparent';\r\n  }\r\n}\r\n\r\nfunction getStatusFontColor(status) {\r\n  switch (status) {\r\n    case 'Added':\r\n      return '#093887';\r\n    case 'Monitored':\r\n      return '#616106';\r\n    case 'Recently Monitored':\r\n      return '#043608';\r\n    default:\r\n      return 'black';\r\n  }\r\n}\r\n","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getCircularProgressUtilityClass(slot) {\n  return generateUtilityClass('MuiCircularProgress', slot);\n}\nconst circularProgressClasses = generateUtilityClasses('MuiCircularProgress', ['root', 'determinate', 'indeterminate', 'colorPrimary', 'colorSecondary', 'svg', 'circle', 'circleDeterminate', 'circleIndeterminate', 'circleDisableShrink']);\nexport default circularProgressClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"color\", \"disableShrink\", \"size\", \"style\", \"thickness\", \"value\", \"variant\"];\nlet _ = t => t,\n  _t,\n  _t2,\n  _t3,\n  _t4;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport { keyframes, css } from '@mui/system';\nimport capitalize from '../utils/capitalize';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport { getCircularProgressUtilityClass } from './circularProgressClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst SIZE = 44;\nconst circularRotateKeyframe = keyframes(_t || (_t = _`\n  0% {\n    transform: rotate(0deg);\n  }\n\n  100% {\n    transform: rotate(360deg);\n  }\n`));\nconst circularDashKeyframe = keyframes(_t2 || (_t2 = _`\n  0% {\n    stroke-dasharray: 1px, 200px;\n    stroke-dashoffset: 0;\n  }\n\n  50% {\n    stroke-dasharray: 100px, 200px;\n    stroke-dashoffset: -15px;\n  }\n\n  100% {\n    stroke-dasharray: 100px, 200px;\n    stroke-dashoffset: -125px;\n  }\n`));\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    variant,\n    color,\n    disableShrink\n  } = ownerState;\n  const slots = {\n    root: ['root', variant, `color${capitalize(color)}`],\n    svg: ['svg'],\n    circle: ['circle', `circle${capitalize(variant)}`, disableShrink && 'circleDisableShrink']\n  };\n  return composeClasses(slots, getCircularProgressUtilityClass, classes);\n};\nconst CircularProgressRoot = styled('span', {\n  name: 'MuiCircularProgress',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[ownerState.variant], styles[`color${capitalize(ownerState.color)}`]];\n  }\n})(({\n  ownerState,\n  theme\n}) => _extends({\n  display: 'inline-block'\n}, ownerState.variant === 'determinate' && {\n  transition: theme.transitions.create('transform')\n}, ownerState.color !== 'inherit' && {\n  color: (theme.vars || theme).palette[ownerState.color].main\n}), ({\n  ownerState\n}) => ownerState.variant === 'indeterminate' && css(_t3 || (_t3 = _`\n      animation: ${0} 1.4s linear infinite;\n    `), circularRotateKeyframe));\nconst CircularProgressSVG = styled('svg', {\n  name: 'MuiCircularProgress',\n  slot: 'Svg',\n  overridesResolver: (props, styles) => styles.svg\n})({\n  display: 'block' // Keeps the progress centered\n});\n\nconst CircularProgressCircle = styled('circle', {\n  name: 'MuiCircularProgress',\n  slot: 'Circle',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.circle, styles[`circle${capitalize(ownerState.variant)}`], ownerState.disableShrink && styles.circleDisableShrink];\n  }\n})(({\n  ownerState,\n  theme\n}) => _extends({\n  stroke: 'currentColor'\n}, ownerState.variant === 'determinate' && {\n  transition: theme.transitions.create('stroke-dashoffset')\n}, ownerState.variant === 'indeterminate' && {\n  // Some default value that looks fine waiting for the animation to kicks in.\n  strokeDasharray: '80px, 200px',\n  strokeDashoffset: 0 // Add the unit to fix a Edge 16 and below bug.\n}), ({\n  ownerState\n}) => ownerState.variant === 'indeterminate' && !ownerState.disableShrink && css(_t4 || (_t4 = _`\n      animation: ${0} 1.4s ease-in-out infinite;\n    `), circularDashKeyframe));\n\n/**\n * ## ARIA\n *\n * If the progress bar is describing the loading progress of a particular region of a page,\n * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`\n * attribute to `true` on that region until it has finished loading.\n */\nconst CircularProgress = /*#__PURE__*/React.forwardRef(function CircularProgress(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCircularProgress'\n  });\n  const {\n      className,\n      color = 'primary',\n      disableShrink = false,\n      size = 40,\n      style,\n      thickness = 3.6,\n      value = 0,\n      variant = 'indeterminate'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    color,\n    disableShrink,\n    size,\n    thickness,\n    value,\n    variant\n  });\n  const classes = useUtilityClasses(ownerState);\n  const circleStyle = {};\n  const rootStyle = {};\n  const rootProps = {};\n  if (variant === 'determinate') {\n    const circumference = 2 * Math.PI * ((SIZE - thickness) / 2);\n    circleStyle.strokeDasharray = circumference.toFixed(3);\n    rootProps['aria-valuenow'] = Math.round(value);\n    circleStyle.strokeDashoffset = `${((100 - value) / 100 * circumference).toFixed(3)}px`;\n    rootStyle.transform = 'rotate(-90deg)';\n  }\n  return /*#__PURE__*/_jsx(CircularProgressRoot, _extends({\n    className: clsx(classes.root, className),\n    style: _extends({\n      width: size,\n      height: size\n    }, rootStyle, style),\n    ownerState: ownerState,\n    ref: ref,\n    role: \"progressbar\"\n  }, rootProps, other, {\n    children: /*#__PURE__*/_jsx(CircularProgressSVG, {\n      className: classes.svg,\n      ownerState: ownerState,\n      viewBox: `${SIZE / 2} ${SIZE / 2} ${SIZE} ${SIZE}`,\n      children: /*#__PURE__*/_jsx(CircularProgressCircle, {\n        className: classes.circle,\n        style: circleStyle,\n        ownerState: ownerState,\n        cx: SIZE,\n        cy: SIZE,\n        r: (SIZE - thickness) / 2,\n        fill: \"none\",\n        strokeWidth: thickness\n      })\n    })\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? CircularProgress.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['inherit', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * If `true`, the shrink animation is disabled.\n   * This only works if variant is `indeterminate`.\n   * @default false\n   */\n  disableShrink: chainPropTypes(PropTypes.bool, props => {\n    if (props.disableShrink && props.variant && props.variant !== 'indeterminate') {\n      return new Error('MUI: You have provided the `disableShrink` prop ' + 'with a variant other than `indeterminate`. This will have no effect.');\n    }\n    return null;\n  }),\n  /**\n   * The size of the component.\n   * If using a number, the pixel unit is assumed.\n   * If using a string, you need to provide the CSS unit, e.g. '3rem'.\n   * @default 40\n   */\n  size: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The thickness of the circle.\n   * @default 3.6\n   */\n  thickness: PropTypes.number,\n  /**\n   * The value of the progress indicator for the determinate variant.\n   * Value between 0 and 100.\n   * @default 0\n   */\n  value: PropTypes.number,\n  /**\n   * The variant to use.\n   * Use indeterminate when there is no progress value.\n   * @default 'indeterminate'\n   */\n  variant: PropTypes.oneOf(['determinate', 'indeterminate'])\n} : void 0;\nexport default CircularProgress;"],"names":["StationViewHeader","title","info","subtitle","progress","sx","color","other","renderProgress","Grid","item","xs","md","bgcolor","borderRadius","p","Box","position","width","height","display","flexDirection","alignItems","justifyContent","CircularProgress","variant","value","size","thickness","zIndex","Typography","fontSize","fontFamily","fontWeight","textAlign","renderDetails","maxWidth","Stack","spacing","textTransform","backgroundColor","marginTop","container","boxShadow","StationParameterCard","parameterValue","parameterName","parameterScript","unit","Card","px","py","direction","style","marginLeft","ViewPerStation","useLocation","state","stationName","user","useAuthContext","stationId","useParams","console","log","useState","stationDetails","setStationDetails","selectedStation","username","tester","parameterData","setParameterData","activityStationLogs","setActivityStationLogs","useEffect","fetchData","Promise","all","fetch","activityLogsResponse","stationLogsResponse","ok","Error","json","activityLogsData","stationLogsData","combinedLogs","logs","sort","a","b","Date","dateAdded","error","fetchStationData","response","data","latestEntry","Object","values","pop","percentageChange","wqi","keys","changeType","status","toFixed","Math","abs","date","toLocaleDateString","weekday","year","month","day","parseFloat","fetchParameterData","encodeURIComponent","message","handleInitializeData","method","headers","body","JSON","stringify","userId","handleTerminateData","Container","mt","sm","ml","mb","Button","onClick","marginRight","length","entries","map","parameter","paramName","paramValue","align","opacity","margin","padding","list","id","_id","MOStationSection","StationActivityTable","subheader","overflowX","overflow","borderBottom","index","fDateTime","getStatusBackgroundColor","getStatusFontColor","getCircularProgressUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_t","_t2","_t3","_t4","_excluded","SIZE","circularRotateKeyframe","keyframes","circularDashKeyframe","CircularProgressRoot","styled","name","overridesResolver","props","styles","ownerState","root","capitalize","theme","_extends","transition","transitions","create","vars","palette","main","css","CircularProgressSVG","svg","CircularProgressCircle","circle","disableShrink","circleDisableShrink","stroke","strokeDasharray","strokeDashoffset","React","inProps","ref","useThemeProps","className","_objectWithoutPropertiesLoose","classes","slots","composeClasses","useUtilityClasses","circleStyle","rootStyle","rootProps","circumference","PI","round","transform","_jsx","clsx","role","children","viewBox","cx","cy","r","fill","strokeWidth"],"sourceRoot":""}