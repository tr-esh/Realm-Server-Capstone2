{"version":3,"file":"static/js/290.ff1c647b.chunk.js","mappings":"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","sources":["sections/MOSection/stations/stationViewHeader.jsx","sections/MOSection/stations/stationParameterCard.jsx","sections/MOSection/stations/view/viewPerStation.jsx","pages/MOStationSection.jsx","sections/MOSection/stations/stationActivityTable.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Grid, Typography, Box, CircularProgress, Dialog, DialogContent } from '@mui/material';\r\nimport '../../../components/styles/WQIStyle.css';\r\n\r\nexport default function StationViewHeader({ title, info, subtitle, progress, color = 'primary', sx, ...other }) {\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n\r\n  const handleDialogClose = () => {\r\n    setDialogOpen(false);\r\n  };\r\n\r\n  const getBarColor = (value) => {\r\n    if (value >= 0 && value <= 25) return '#A1E6A6'; // Green\r\n    if (value > 25 && value <= 50) return '#FFFF80'; // Faded Green\r\n    if (value > 50 && value <= 75) return '#EEFF51'; // Almost Yellow\r\n    if (value > 75 && value <= 100) return '#F5B748'; // Almost Orange\r\n    if (value > 100 && value <= 150) return '#FF6551'; // Red\r\n    return '#8CACFF'; // Default color\r\n  };\r\n\r\n  const barColor = getBarColor(progress);\r\n\r\n  const handleCircularProgressBarClick = () => {\r\n    setDialogOpen(true);\r\n  };\r\n\r\n  const renderProgress = (\r\n    <Grid\r\n      item\r\n      xs={12}\r\n      md={4}\r\n      sx={{\r\n        bgcolor: '#03182f',\r\n        borderRadius: { xs: '45px 45px 0 0', md: '45px 0 0 45px' },\r\n        p: 5,\r\n        ...sx,\r\n      }}\r\n    >\r\n      <Box\r\n        sx={{\r\n          position: 'relative',\r\n          width: '100%',\r\n          height: '100%',\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n          cursor: 'pointer',\r\n        }}\r\n        onClick={handleCircularProgressBarClick}\r\n      >\r\n        <CircularProgress\r\n          variant=\"determinate\"\r\n          value={progress}\r\n          size={200}\r\n          thickness={5}\r\n          sx={{\r\n            width: '100%',\r\n            height: '100%',\r\n            borderRadius: '80%',\r\n            position: 'relative',\r\n            color: barColor,\r\n            zIndex: 2,\r\n          }}\r\n        />\r\n        <CircularProgress\r\n          variant=\"determinate\"\r\n          value={100}\r\n          size={200}\r\n          thickness={5}\r\n          sx={{\r\n            color: 'rgba(255, 255, 255, 0.1)',\r\n            borderRadius: '50%',\r\n            position: 'absolute',\r\n            zIndex: 1,\r\n          }}\r\n        />\r\n        <Typography\r\n          variant=\"h4\"\r\n          sx={{\r\n            fontSize: 24,\r\n            fontFamily: \"Archivo, 'sans-serif'\",\r\n            fontWeight: '700',\r\n            color: barColor,\r\n            position: 'absolute',\r\n            zIndex: 3,\r\n          }}\r\n        >\r\n          {progress}%\r\n          <Typography\r\n            variant=\"body2\"\r\n            sx={{\r\n              fontSize: 13,\r\n              fontFamily: \"Poppins\",\r\n              fontWeight: '300',\r\n              color: 'white',\r\n              textAlign: 'center'\r\n            }}\r\n          >\r\n            WQI\r\n          </Typography>\r\n        </Typography>\r\n      </Box>\r\n    </Grid>\r\n  );\r\n\r\n  const renderDetails = (\r\n    <Grid\r\n      item\r\n      xs={12}\r\n      md={8}\r\n      sx={{\r\n        bgcolor: '#001227',\r\n        borderRadius: { xs: '0 0 45px 45px', md: '0 45px 45px 0' },\r\n        p: 5,\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        flexDirection: 'column',\r\n        ...sx,\r\n      }}\r\n    >\r\n      <Box sx={{ maxWidth: '400px', width: '100%' }}>\r\n        <Typography\r\n          variant=\"h4\"\r\n          sx={{\r\n            fontSize: 15,\r\n            fontFamily: \"Archivo, 'sans-serif'\",\r\n            fontWeight: '600',\r\n            color: barColor,\r\n            textTransform: 'uppercase',\r\n            backgroundColor: '#03182f',\r\n            width: '100%',\r\n            height: '2.5rem',\r\n            display: 'flex',\r\n            borderRadius: '2rem',\r\n            textAlign: 'center',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            marginTop: '2rem',\r\n          }}\r\n        >\r\n          {title}\r\n        </Typography>\r\n        <Typography\r\n          variant=\"h4\"\r\n          sx={{\r\n            fontSize: 55,\r\n            fontFamily: \"Poppins\",\r\n            fontWeight: '700',\r\n            color: barColor,\r\n            textTransform: 'uppercase',\r\n            marginTop: '1rem',\r\n          }}\r\n        >\r\n          {info}\r\n        </Typography>\r\n        <Typography\r\n          variant=\"body2\"\r\n          sx={{\r\n            fontSize: 13,\r\n            fontFamily: \"Archivo, 'sans-serif'\",\r\n            fontWeight: '300',\r\n            color: 'white',\r\n          }}\r\n        >\r\n          {subtitle}\r\n        </Typography>\r\n      </Box>\r\n    </Grid>\r\n  );\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      spacing={0}\r\n      sx={{\r\n        backgroundColor: 'transparent',\r\n        boxShadow: 'none',\r\n        ...sx,\r\n      }}\r\n      {...other}\r\n    >\r\n      {renderProgress}\r\n      {renderDetails}\r\n      <Dialog open={dialogOpen} onClose={handleDialogClose} maxWidth=\"sm\" fullWidth\r\n      PaperProps={{\r\n        sx: {\r\n          backgroundColor: 'transparent',\r\n          boxShadow: 'none',\r\n          borderRadius: '1rem',\r\n          color: 'white',\r\n          padding: '2rem',\r\n        },\r\n      }}>\r\n        <DialogContent\r\n          sx={{\r\n            backgroundColor: '#0d2135',\r\n            borderRadius: '1rem',\r\n            color: 'white',\r\n            padding: '2rem',\r\n          }}\r\n        >\r\n          <div className='Qi-container'>\r\n            \r\n            \r\n            <Typography variant=\"h4\" sx={{ fontFamily: \"Poppins\", fontWeight: '700', textAlign: 'center', color: '#8CACFF'}}>\r\n              Classification of Water Quality Index:\r\n            </Typography>\r\n            \r\n            <div className='class-holder'>\r\n              <div className=\"interpretation-holder\">\r\n                <div className='point-holder'>\r\n                  <Typography variant=\"h6\" sx={{ fontFamily: \"Poppins\", fontWeight: '700', color: '#A1E6A6' }}>\r\n                    0-25\r\n                  </Typography>\r\n                </div>\r\n                <div className='interpretation'>\r\n                  <Typography variant=\"h6\" sx={{ fontFamily: \"Poppins\", fontWeight: '700' , color: '#A1E6A6'}}>Excellent\r\n                    <Typography variant=\"body1\" sx={{ fontFamily: \"Poppins\", fontWeight: '400' }}>Clean water, excellently suitable for drinking</Typography>\r\n                  </Typography>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"interpretation-holder\">\r\n                <div className='point-holder'>\r\n                  <Typography variant=\"h6\" sx={{ fontFamily: \"Poppins\", fontWeight: '700', color: '#FFFF80' }}>\r\n                    26-50\r\n                  </Typography>\r\n                </div>\r\n                <div className='interpretation'>\r\n                  <Typography variant=\"h6\" sx={{ fontFamily: \"Poppins\", fontWeight: '700', color: '#FFFF80' }}>Good\r\n                    <Typography variant=\"body1\" sx={{ fontFamily: \"Poppins\", fontWeight: '400' }}>Suitable for drinking</Typography>\r\n                  </Typography>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"interpretation-holder\">\r\n                <div className='point-holder'>\r\n                  <Typography variant=\"h6\" sx={{ fontFamily: \"Poppins\", fontWeight: '700', color: '#EEFF51' }}>\r\n                    51-75\r\n                  </Typography>\r\n                </div>\r\n                <div className='interpretation'>\r\n                  <Typography variant=\"h6\" sx={{ fontFamily: \"Poppins\", fontWeight: '700', color: '#EEFF51'}}>Fair\r\n                    <Typography variant=\"body1\" sx={{ fontFamily: \"Poppins\", fontWeight: '400' }}>Modestly suitable for drinking</Typography>\r\n                  </Typography>              \r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"interpretation-holder\">\r\n                <div className='point-holder'>\r\n                  <Typography variant=\"h6\" sx={{ fontFamily: \"Poppins\", fontWeight: '700', color: '#F5B748' }}>\r\n                    76-100\r\n                  </Typography>\r\n                </div>\r\n                <div className='interpretation'>\r\n                  <Typography variant=\"h6\" sx={{ fontFamily: \"Poppins\", fontWeight: '700' , color: '#F5B748'}}>Poor\r\n                    <Typography variant=\"body1\" sx={{ fontFamily: \"Poppins\", fontWeight: '400' }}>Unsuitable for drinking, minor treatment (purification) required before usage</Typography>\r\n                  </Typography>                \r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"interpretation-holder\">\r\n                <div className='point-holder'>\r\n                  <Typography variant=\"h6\" sx={{ fontFamily: \"Poppins\", fontWeight: '700', color: '#FF6551' }}>\r\n                    &gt; 100\r\n                  </Typography>\r\n                </div>\r\n                <div className='interpretation'>\r\n                  <Typography variant=\"h6\" sx={{ fontFamily: \"Poppins\", fontWeight: '700', color: '#FF6551' }}>Very Poor\r\n                    <Typography variant=\"body1\" sx={{ fontFamily: \"Poppins\", fontWeight: '400' }}>Unsuitable for drinking, Appropriate treatment required before usage or seek alternative sources of supply</Typography>\r\n                  </Typography>               \r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nStationViewHeader.propTypes = {\r\n  color: PropTypes.string,\r\n  sx: PropTypes.object,\r\n  title: PropTypes.string.isRequired,\r\n  info: PropTypes.string.isRequired,\r\n  subtitle: PropTypes.string.isRequired,\r\n  progress: PropTypes.number.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport Card from '@mui/material/Card';\r\nimport Stack from '@mui/material/Stack';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nexport default function StationParameterCard({parameterValue, parameterName, parameterScript, unit, sx, ...other}) {\r\n    return(\r\n        <Card\r\n            spacing={3}\r\n            sx={{\r\n            px: 4,\r\n            py: 4,\r\n            borderRadius: 12,\r\n            ...sx,\r\n            }}\r\n            {...other}\r\n        >\r\n            <Stack direction=\"column\" alignItems=\"center\">\r\n\r\n                <Typography variant=\"h5\"\r\n                    sx={{ color: '#8cacff',\r\n                        fontSize:  30,\r\n                        fontFamily: \"'Raleway', sans-serif\", \r\n                        fontWeight: '600',\r\n                    }}\r\n                 >\r\n                    {parameterName}\r\n                </Typography>\r\n\r\n                <Typography\r\n                    variant=\"h6\"\r\n                    sx={{\r\n                        fontSize: 13,\r\n                        fontFamily: \"Archivo, 'sans-serif'\",\r\n                        fontWeight: '500',\r\n                        textTransform: 'uppercase',\r\n                        backgroundColor: '#03182f',\r\n                        width: '14rem',\r\n                        height: '1.7rem',\r\n                        display: 'flex',\r\n                        borderRadius: '2rem',\r\n                        textAlign: 'center',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'center',\r\n                        color:\r\n                            parameterScript === 'Optimal temperature' ||\r\n                            parameterScript === 'Water is Clean' ||\r\n                            parameterScript === 'Neutral'\r\n                                ? '#A1E6A6'\r\n                                : parameterScript === 'Suboptimal temperature' ||\r\n                                parameterScript === 'Water is Turbid(Dirty)' ||\r\n                                parameterScript === 'pH level is Acidic'\r\n                                ? '#F5B748'\r\n                                : parameterScript === 'pH level is Alkaline'\r\n                                ? '#FFFF80'\r\n                                : '#FFFFFF', // Default color if none of the conditions are met\r\n                    }}\r\n                >\r\n                    {parameterScript}\r\n                </Typography>\r\n\r\n\r\n                <Typography variant=\"h2\"\r\n                    sx={{\r\n                        color: '#8cacff',\r\n                        fontFamily: \"Poppins\",\r\n                        fontWeight: '500',\r\n                        textTransform: 'uppercase',\r\n                      }}\r\n                 >\r\n                    {parameterValue}\r\n                    <span\r\n                        style={{\r\n                        fontSize: 30, // Adjust the font size as needed\r\n                        marginLeft: '0.2em', // Add some space between parameterValue and unit\r\n                        }}\r\n                    >\r\n                        {unit}\r\n                    </span>\r\n                </Typography>\r\n\r\n            </Stack>\r\n\r\n        </Card>\r\n    )\r\n}\r\n\r\nStationParameterCard.propTypes = {\r\n    parameterValue: PropTypes.number.isRequired,\r\n    parameterName: PropTypes.string.isRequired,\r\n    parameterScript: PropTypes.string.isRequired,\r\n    unit: PropTypes.string.isRequired,\r\n    sx: PropTypes.object,\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { useLocation, useParams } from 'react-router-dom';\r\nimport { Container, Grid, Button, Typography } from \"@mui/material\";\r\nimport StationViewHeader from \"../stationViewHeader\";\r\n\r\nimport StationParameterCard from '../stationParameterCard';\r\nimport StationActivityTable from '../stationActivityTable';\r\nimport { useAuthContext } from '../../../../hooks/useAuthContext';\r\n\r\nexport default function ViewPerStation () {\r\n    const location = useLocation();\r\n    const { state: { title, stationName }} = location;\r\n    const { user } = useAuthContext();\r\n    const { stationId } = useParams();\r\n    console.log('Params:', stationId );\r\n\r\n    \r\n    const [stationDetails, setStationDetails] = useState({\r\n        title: title || 'Default Title',\r\n        info: '',\r\n        subtitle: '',\r\n        progress: 0\r\n    });\r\n\r\n    const [selectedStation, setSelectedStation] = useState(stationName);\r\n    const [tester, setTester] = useState(user.username);\r\n    const [parameterData, setParameterData] = useState([]);\r\n\r\n    const [activityStationLogs, setActivityStationLogs] = useState([]);\r\n    const [isInitialized, setIsInitialized] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const [activityLogsResponse, stationLogsResponse] = await Promise.all([\r\n                    fetch(`/api/realm/activityLogs/${stationId}`),\r\n                    fetch(`/api/realm/stationLogs/${stationId}`)\r\n                ]);\r\n    \r\n                if (!activityLogsResponse.ok || !stationLogsResponse.ok) {\r\n                    throw new Error('Failed to fetch logs');\r\n                }\r\n    \r\n                const activityLogsData = await activityLogsResponse.json();\r\n                const stationLogsData = await stationLogsResponse.json();\r\n    \r\n                // Combine activity logs and station logs\r\n                const combinedLogs = [...activityLogsData.logs, ...stationLogsData.logs];\r\n    \r\n                // Sort the combined logs by date in descending order\r\n                combinedLogs.sort((a, b) => new Date(b.dateAdded) - new Date(a.dateAdded));\r\n    \r\n                setActivityStationLogs(combinedLogs);\r\n            } catch (error) {\r\n                console.error('Error fetching logs:', error);\r\n            }\r\n        };\r\n    \r\n        fetchData();\r\n    }, [stationId]);\r\n\r\n    useEffect(() => {\r\n        const fetchStationData = async () => {\r\n          try {\r\n            const response = await fetch(`/api/realm/calculateWQI`);\r\n            if (!response.ok) throw new Error('Failed to fetch station data');\r\n            const data = await response.json();\r\n            if (data[stationId]) {\r\n              \r\n              // Assuming you still want to calculate and update station details based on the latest entry\r\n              const latestEntry = Object.values(data[stationId]).pop();\r\n              const percentageChange = ((latestEntry.wqi - data[stationId][Object.keys(data[stationId])[0]].wqi) / data[stationId][Object.keys(data[stationId])[0]].wqi) * 100;\r\n              const changeType = percentageChange > 0 ? 'increased' : 'decreased';\r\n              setStationDetails({\r\n                ...stationDetails,\r\n                info: latestEntry.status,\r\n                subtitle: ` ${stationId} is interpreted as ${latestEntry.status} with a WQI result ${latestEntry.wqi.toFixed(2)} ${changeType} by ${Math.abs(percentageChange).toFixed(2)}% since ${new Date(latestEntry.date).toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}`,\r\n                progress: parseFloat(latestEntry.wqi.toFixed(2))\r\n              });\r\n               \r\n            } else {\r\n              // If no latest data available, trigger fetching initial data\r\n              setIsInitialized(true);\r\n            }\r\n          } catch (error) {\r\n            console.error('Error fetching station data:', error);\r\n          }\r\n        };\r\n    \r\n        fetchStationData();\r\n      }, [stationId]); // Fetch data whenever stationId changes\r\n      \r\n      useEffect(() => {\r\n        const fetchInitialData = async () => {\r\n            if (isInitialized) {\r\n                try {\r\n                    const response = await fetch(`/api/realm/wqiResult`);\r\n                    if (!response.ok) throw new Error('Failed to fetch station data');\r\n                    const data = await response.json();\r\n                    \r\n                    if (data[stationId]) {\r\n                        const latestEntry = data[stationId];\r\n                        const { wqi, status, createdAt } = latestEntry;\r\n\r\n                        // Update station details state\r\n                        setStationDetails({\r\n                            ...stationDetails,\r\n                            info: status,\r\n                            subtitle: `${stationId} is interpreted as ${status} with a WQI result ${wqi.toFixed(2)} since ${new Date(createdAt).toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}`,\r\n                            progress: parseFloat(wqi.toFixed(2))\r\n                        });\r\n\r\n                    } else {\r\n                        console.error('Station data not found');\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error fetching station data:', error);\r\n                }\r\n            }\r\n        };\r\n\r\n        fetchInitialData();\r\n    }, [isInitialized, stationId]);\r\n      \r\n\r\n    useEffect(() => {\r\n        const fetchParameterData = async () => {\r\n            try {\r\n                const response = await fetch(`/api/realm/latestStationReadings/${encodeURIComponent(selectedStation)}`);\r\n                const data = await response.json();\r\n    \r\n                console.log('Fetched data:', data); // Log the data received from the API\r\n    \r\n                if (response.status === 200) {\r\n                    setParameterData(data);\r\n                } else {\r\n                    console.error('Failed to fetch parameter data:', data.error);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error during parameter data fetch:', error.message);\r\n            }\r\n        };\r\n    \r\n        fetchParameterData();\r\n\r\n        // Setup interval to fetch data periodically (every 5 seconds in this example)\r\n        const intervalId = setInterval(fetchParameterData, 5000);\r\n    \r\n        return () => clearInterval(intervalId);\r\n    }, [selectedStation]);\r\n\r\n    let lastUserId;\r\n    const handleInitializeData = async () => {\r\n      try {\r\n        // Check if both station and tester are selected\r\n        if (!selectedStation || !tester) {\r\n          console.error('Please select Station Name and Tester Name');\r\n          return;\r\n        }\r\n    \r\n        // Send initialization request to the backend\r\n        const response = await fetch('/api/realm/startMonitoring', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            stationName: selectedStation,\r\n            tester: tester,\r\n          }),\r\n        });\r\n    \r\n        const data = await response.json();\r\n        console.log(data.message);\r\n    \r\n        // If the startMonitoring operation was successful, store the user ID\r\n        if (response.status === 201) {\r\n          lastUserId = data.userId; // Assuming your server returns the created user ID\r\n          setIsInitialized(true); // Set initialization status to true if successful\r\n        }\r\n      } catch (error) {\r\n        // Handle errors during initialization\r\n        console.error('Error during initialization:', error.message);\r\n      }\r\n    };    \r\n\r\n    const handleTerminateData = async () => {\r\n      try {\r\n        const response = await fetch('/api/realm/deleteUserData', {\r\n          method: 'DELETE'\r\n        });\r\n    \r\n        const data = await response.json();\r\n        console.log(data.message); // log the response message\r\n    \r\n      } catch (error) {\r\n        console.error('Error:', error.message);\r\n      }\r\n      setIsInitialized(false);\r\n    };\r\n\r\n    const progressData = [\r\n        { name: 'progress', value: 42.4 }, // Replace with the actual progress value\r\n    ];\r\n\r\n    return(\r\n        <Container maxWidth=\"lg\">\r\n            <Grid container spacing={5} mt={2}>\r\n                \r\n                <Grid item xs={12} sm={12} md={12}>\r\n                    <StationViewHeader\r\n                        title={stationDetails.info}\r\n                        info={stationDetails.title}\r\n                        subtitle={stationDetails.subtitle}\r\n                        progress={stationDetails.progress}\r\n                     />\r\n                </Grid>\r\n\r\n                <Grid item container xs={12} sm={12} md={12} justifyContent=\"flex-start\" alignItems=\"center\" ml={1}>\r\n                    <Grid item xs={12} sm={12} md={6} mb={3}>\r\n                        <div>\r\n                            <span style={{\r\n                                color: 'white',\r\n                                fontFamily: \"'Arimo', sans-serif\",\r\n                                fontWeight: 500,\r\n                                fontSize: 20,\r\n                                textTransform: 'uppercase',\r\n                                marginLeft: 2\r\n                            }}>\r\n                                Monitored\r\n                            </span>\r\n                            <span style={{\r\n                                color: '#8cacff',\r\n                                fontFamily: \"'Arimo', sans-serif\",\r\n                                fontWeight: 500,\r\n                                fontSize: 20,\r\n                                textTransform: 'uppercase',\r\n                                marginLeft: 4\r\n                            }}>\r\n                                Physicochemical Parameters\r\n                            </span>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={6} container justifyContent=\"flex-end\">\r\n                        <Button variant=\"contained\"\r\n                            onClick={handleInitializeData}\r\n                            sx={{\r\n                                borderRadius: 5,\r\n                                padding: '1ch',\r\n                                backgroundColor: '#8cacff',\r\n                                marginRight: 1,\r\n                                fontFamily: \"Poppins\", \r\n                                color: '#001227',\r\n                                fontsize: '0.9rem'\r\n                            }}\r\n                        >\r\n                            Start Monitoring\r\n                        </Button>\r\n                        <Button variant=\"contained\"\r\n                            onClick={handleTerminateData}\r\n                            sx={{\r\n                                borderRadius: 5,\r\n                                backgroundColor: '#8cacff',\r\n                                fontFamily: \"Poppins\",\r\n                                color: '#001227',\r\n                                fontsize: '0.9rem'\r\n                            }}\r\n                        >\r\n                            Terminate\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                {parameterData && Object.keys(parameterData).length > 0 ? (\r\n                    Object.entries(parameterData).map(([parameterName, parameter]) => (\r\n                        <Grid item key={parameterName} xs={12} sm={4} md={4}>\r\n                            <StationParameterCard\r\n                            sx={{ backgroundColor: '#001227' }}\r\n                            parameterName={parameter.paramName}\r\n                            parameterScript={parameter.parameterScript}\r\n                            parameterValue={parameter.paramValue}\r\n                            unit={parameter.unit}\r\n                            />\r\n                        </Grid>\r\n                        ))\r\n                    ) : (\r\n                        <Grid item xs={12} sm={12} md={12} mt={5} height={150}>\r\n                            <Typography variant=\"h6\" \r\n                                        color=\"textSecondary\" \r\n                                        align=\"center\"\r\n                                        sx={{ fontFamily: 'Poppins',\r\n                                              fontWeight: '200',\r\n                                              color: '#8cacff',\r\n                                              opacity: '75%' }}>\r\n                                No parameter data available\r\n                            </Typography>\r\n                        </Grid>\r\n                    )}\r\n\r\n                <Grid item xs={12} sm={12} md={12} mt={4}\r\n                      style={{ display:'flex', flexDirection: 'column' }}>\r\n                        <span style={{ color: 'white', \r\n                                        fontFamily: \"'Arimo', sans-serif\", \r\n                                        fontWeight: 500,\r\n                                        fontSize: 25, \r\n                                        textTransform: 'uppercase',\r\n                                        marginLeft: 8\r\n                              }}\r\n                          >\r\n                            Latest Station Activity\r\n                        </span>\r\n                        <span style={{ color: '#8CACFF', \r\n                                        fontFamily: \"Poppins\", \r\n                                        fontWeight: 300,\r\n                                        fontSize: 13, \r\n                                        marginLeft: 8\r\n                            }}\r\n                          >\r\n                            Review the recent station activities that have taken place\r\n                        </span>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={12} md={12}>\r\n                    <StationActivityTable\r\n                        sx={{\r\n                        backgroundColor: '#0d2135',\r\n                        boxShadow: 'none',\r\n                        margin: 0,\r\n                        padding: 0\r\n                        }}\r\n                        list={activityStationLogs.map(log => ({\r\n                            id: log._id,\r\n                            tester: log.tester,\r\n                            dateAdded: log.dateAdded,\r\n                            status: log.status,\r\n                        }))}  \r\n                    />\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}","import ViewPerStation from \"../sections/MOSection/stations/view/viewPerStation\"\r\n\r\nexport default function MOStationSection() {\r\n    return(\r\n        <div>\r\n            <ViewPerStation />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Card, Table, TableHead, TableBody, TableRow, TableCell, Paper } from '@mui/material';\r\nimport { fDateTime } from '../../../utils/formatTme'; // Adjust the path according to your project structure\r\n\r\nexport default function StationActivityTable({ title, subheader, list, sx, ...other }) {\r\n  return (\r\n    <Card spacing={3} sx={{ px: 4, py: 4, overflowX: 'auto', ...sx }} {...other}>\r\n      <Paper sx={{ borderRadius: '15px', overflow: 'hidden', backgroundColor: 'transparent', boxShadow: 'none' }}>\r\n        <Table>\r\n          <TableHead style={{ backgroundColor: '#001227', color: 'white', fontWeight: 600 }}>\r\n            <TableRow>\r\n              <TableCell align=\"center\" sx={{ color: '#8cacff', fontWeight: 600, fontFamily: 'Poppins', borderBottom: 'none' }}>Tester</TableCell>\r\n              <TableCell align=\"center\" sx={{ color: '#8cacff', fontWeight: 600, fontFamily: 'Poppins', borderBottom: 'none' }}>Date</TableCell>\r\n              <TableCell align=\"center\" sx={{ color: '#8cacff', fontWeight: 600, fontFamily: 'Poppins', borderBottom: 'none' }}>Status</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {list.map((item, index) => (\r\n              <TableRow key={item.id || index}>\r\n                <TableCell align=\"center\" sx={{ borderBottom: '1px solid #03324e', color: '#8cacff', fontFamily: 'Poppins', fontWeight: '700' }}>{item.tester}</TableCell>\r\n                <TableCell align=\"center\" sx={{ borderBottom: '1px solid #03324e', color: '#8cacff', fontFamily: 'Poppins' }}>{fDateTime(item.dateAdded)}</TableCell>\r\n                <TableCell align=\"center\" sx={{ borderBottom: '1px solid #03324e', color: '#8cacff', fontFamily: 'Poppins' }}>\r\n                  <span\r\n                    style={{\r\n                      backgroundColor: getStatusBackgroundColor(item.status),\r\n                      color: getStatusFontColor(item.status),\r\n                      padding: '0.5rem',\r\n                      fontWeight: '700',\r\n                      borderRadius: '3rem',\r\n                      fontFamily: 'Poppins'\r\n                    }}\r\n                  >\r\n                    {item.status}\r\n                  </span>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </Paper>\r\n    </Card>\r\n  );\r\n}\r\n\r\nStationActivityTable.propTypes = {\r\n  list: PropTypes.array,\r\n  subheader: PropTypes.string,\r\n  title: PropTypes.string,\r\n  sx: PropTypes.object,\r\n};\r\n\r\nfunction getStatusBackgroundColor(status) {\r\n  switch (status) {\r\n    case 'Added':\r\n      return '#74a7f7';\r\n    case 'Monitored':\r\n      return '#ffff80';\r\n    case 'Recently Monitored':\r\n      return '#a1e6a6';\r\n    default:\r\n      return 'transparent';\r\n  }\r\n}\r\n\r\nfunction getStatusFontColor(status) {\r\n  switch (status) {\r\n    case 'Added':\r\n      return '#093887';\r\n    case 'Monitored':\r\n      return '#616106';\r\n    case 'Recently Monitored':\r\n      return '#043608';\r\n    default:\r\n      return 'black';\r\n  }\r\n}\r\n"],"names":["StationViewHeader","value","title","info","subtitle","progress","sx","color","other","useState","dialogOpen","setDialogOpen","barColor","renderProgress","Grid","item","xs","md","bgcolor","borderRadius","p","Box","position","width","height","display","flexDirection","alignItems","justifyContent","cursor","onClick","CircularProgress","variant","size","thickness","zIndex","Typography","fontSize","fontFamily","fontWeight","textAlign","renderDetails","maxWidth","textTransform","backgroundColor","marginTop","container","spacing","boxShadow","Dialog","open","onClose","fullWidth","PaperProps","padding","DialogContent","className","StationParameterCard","parameterValue","parameterName","parameterScript","unit","Card","px","py","Stack","direction","style","marginLeft","ViewPerStation","useLocation","state","stationName","user","useAuthContext","stationId","useParams","console","log","stationDetails","setStationDetails","selectedStation","username","tester","parameterData","setParameterData","activityStationLogs","setActivityStationLogs","isInitialized","setIsInitialized","useEffect","fetchData","Promise","all","fetch","activityLogsResponse","stationLogsResponse","ok","Error","json","activityLogsData","stationLogsData","combinedLogs","logs","sort","a","b","Date","dateAdded","error","fetchStationData","response","data","latestEntry","Object","values","pop","percentageChange","wqi","keys","changeType","status","toFixed","Math","abs","date","toLocaleDateString","weekday","year","month","day","parseFloat","fetchInitialData","createdAt","fetchParameterData","encodeURIComponent","message","intervalId","setInterval","clearInterval","handleInitializeData","method","headers","body","JSON","stringify","userId","handleTerminateData","Container","mt","sm","ml","mb","Button","marginRight","fontsize","length","entries","map","parameter","paramName","paramValue","align","opacity","margin","list","id","_id","MOStationSection","StationActivityTable","subheader","overflowX","overflow","borderBottom","index","fDateTime","getStatusBackgroundColor","getStatusFontColor"],"sourceRoot":""}