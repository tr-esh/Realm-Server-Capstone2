{"version":3,"file":"static/js/287.612644ae.chunk.js","mappings":"sQAKMA,EAAgB,WACpB,OAAgCC,EAAAA,EAAAA,UAAS,IAAG,eAArCC,EAAQ,KAAEC,EAAW,KAkB5B,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IACMC,GADO,IAAIC,MACEC,WAWnBJ,EARIE,EAAQ,GACQ,WACTA,GAAS,IAAMA,EAAQ,GACd,aAEA,WAItB,GAAG,KAEI,iBAAMG,UAAU,gBAAe,SAAEN,GAC1C,EAoBA,EAlBiB,WACf,IAAQO,GAASC,EAAAA,EAAAA,KAATD,KAER,OACE,4BACE,UAACE,EAAA,EAAU,CAACC,QAAQ,KAAI,WACtB,iBAAMJ,UAAU,gBAAe,SAAC,SAAW,KAAC,SAACR,EAAa,IAAI,QAEhE,SAACW,EAAA,EAAU,CAACC,QAAQ,KAAI,SACrBH,IAAQ,iBAAMD,UAAU,aAAY,SAAEC,EAAKI,cAE9C,SAACF,EAAA,EAAU,CAACC,QAAQ,KAAI,UACtB,iBAAMJ,UAAU,YAAW,SAAC,6CAIpC,E,2IC0BA,MA7DA,SAA0B,GAStB,IARFM,EAAK,EAALA,MACAC,EAAW,EAAXA,YACAC,EAAI,EAAJA,KAEAC,GAFI,EACJC,MACE,EAAFD,IACAE,EAAS,EAATA,UACAC,EAAa,EAAbA,cACGC,GAAK,YAEFC,GAAWC,EAAAA,EAAAA,GAAc,qBAE/B,OACE,UAACC,EAAA,GAAI,gBACHC,UAAWC,EAAAA,EACXC,QAAS,EACTC,UAAU,MACVX,IAAE,QACAY,aAAc,GACdC,EAAG,EACHC,gBAAiB,UACjBC,UAAW,QACRf,IAEDI,GAAK,cAERL,IAAQ,SAACiB,EAAA,EAAG,CAAChB,GAAI,CAAEiB,MAAO,GAAIC,OAAQ,IAAK,SAAEnB,KAE9C,UAACU,EAAA,EAAK,YACJ,SAACf,EAAA,EAAU,CAACC,QAAQ,YAAYK,GAAI,CAAEC,MAAO,iBAAkB,SAC5DJ,IAEFM,IACC,UAACM,EAAA,EAAK,WACHN,EAAc,WAKnBE,IACA,gBACEc,IAAKrB,EACLsB,IAAI,eACJC,MAAO,CAAEJ,MAAOf,EAAWgB,OAAQ,OAAQI,QAAS,QAASC,WAAY,QACzEhC,UAAU,wBAKpB,E,kJC/Ce,SAASiC,EAAc,GAA4C,IAA1C3B,EAAK,EAALA,MAAO4B,EAAS,EAATA,UAAkBzB,GAAF,EAAL0B,MAAS,EAAF1B,IAAOI,GAAK,YAC3E,GAAsCpB,EAAAA,EAAAA,UAAS,IAAG,eAA3C2C,EAAW,KAAEC,EAAc,KAClC,GAA0C5C,EAAAA,EAAAA,UAAS,MAAK,eAAjD6C,EAAa,KAAEC,EAAgB,KACtC,GAA4C9C,EAAAA,EAAAA,UAAS,MAAK,eAAnD+C,EAAc,KAAEC,EAAiB,MAExC7C,EAAAA,EAAAA,YAAU,WACgB,aAsCvB,OAtCuB,0BAAxB,0HAE2B8C,MAAM,2BAA2B,KAAD,EAAzC,IAARC,EAAQ,QACAC,GAAG,CAAD,qBACR,IAAIC,MAAM,wBAAwB,KAAD,kBAEtBF,EAASG,OAAO,KAAD,EAA5BC,EAAI,OAGJC,EAAU,GAGhBC,OAAOC,KAAKH,GAAMI,SAAQ,SAAAC,GAExB,IAAMC,EAAaJ,OAAOC,KAAKH,EAAKK,IAAYE,QAAO,SAACC,EAAMC,GAC5D,OAAQ,IAAI1D,KAAK0D,GAAW,IAAI1D,KAAKyD,GAASC,EAAUD,CAC1D,IAGME,EAAcV,EAAKK,GAAWC,GAGpCL,EAAQU,MAAK,QACXN,UAAAA,GACGK,GAEP,IAEApB,EAAeW,GAGTW,EAASX,EAAQM,QAAO,SAACC,EAAMC,GAAO,OAAMD,EAAKK,IAAMJ,EAAQI,IAAOL,EAAOC,CAAO,IACpFK,EAAUb,EAAQM,QAAO,SAACC,EAAMC,GAAO,OAAMD,EAAKK,IAAMJ,EAAQI,IAAOL,EAAOC,CAAO,IAC3FjB,EAAiBoB,GACjBlB,EAAkBoB,GAAS,kDAE3BC,QAAQC,MAAM,+BAA+B,EAAD,IAAS,2DAExD,uBAvCc,WACS,wBAwCxBC,EACF,GAAG,IAGH,IAmBMC,EAAY7B,EAAY8B,KAAI,SAAAC,GAAO,MAAK,CAC5CC,MAAOD,EAAQf,UACfiB,MAAOC,WAAWH,EAAQP,IAAIW,QAAQ,IACtCC,MAtBgBH,EAsBDF,EAAQP,IArBnBS,GAAS,GAAKA,GAAS,GAAW,UAClCA,EAAQ,IAAMA,GAAS,GAAW,UAClCA,EAAQ,IAAMA,GAAS,GAAW,UAClCA,EAAQ,IAAMA,GAAS,IAAY,UACnCA,EAAQ,KAAOA,GAAS,IAAY,UACjC,YANQ,IAACA,CAuBjB,IAED,OACE,UAACrD,EAAA,GAAI,gBACHG,QAAS,EACTV,IAAE,QACAgE,GAAI,EACJC,GAAI,EACJrD,aAAc,IACXZ,IAEDI,GAAK,eAET,SAAC8D,EAAA,EAAU,CACTrE,OACE,SAACH,EAAA,EAAU,CAACC,QAAQ,KACR0B,MAAO,CAAEpB,MAAO,QACPkE,WAAY,wBACZC,WAAY,IACZC,SAAU,GACVC,cAAe,aAChB,SAEjBzE,IAGL4B,WACE,UAAC/B,EAAA,EAAU,CAACC,QAAQ,YACV0B,MAAO,CAAEpB,MAAO,UACRkE,WAAY,UACZC,WAAY,IACZC,SAAU,GACVE,WAAY,IACV,UAEjB9C,EACAI,GAAiBE,GAAc,mFAC8CF,EAAcc,UAAS,4DAAoDZ,EAAeY,iBAK9K,SAAC3B,EAAA,EAAG,CAACwD,GAAI,EAAGxE,GAAI,CAAEyE,GAAI,GAAI,UAC1B,SAACC,EAAA,EAAmB,CAACzD,MAAM,OAAOC,OAAQ,IAAI,UAC1C,UAACyD,EAAA,EAAQ,CACPrC,KAAMkB,EACNoB,OAAQ,CAAEC,IAAK,EAAGC,MAAO,EAAGC,KAAM,EAAGC,OAAQ,GAAI,WACjD,SAACC,EAAA,EAAa,CACZC,gBAAgB,MAChBC,YAAY,EACZC,UAAU,EACVC,OAAO,8BAET,SAACC,EAAA,EAAK,CACJC,QAAQ,QACRC,KAAK,WACLC,KAAM,CAAEpB,SAAU,GAAIF,WAAY,UAAWJ,KAAM,QAASK,WAAY,OACxEsB,UAAU,EACVC,UAAU,EACV1E,MAAO,GAAI,UAGX,SAAC2E,EAAA,EAAK,CAAChC,MAAM,oBAAoBiC,QAAS,EAAGC,SAAS,SAASzE,MAAO,CAAEgD,SAAU,GAAIF,WAAY,UAAWJ,KAAM,UAAWK,WAAY,YAE5I,SAAC2B,EAAA,EAAM,CACLR,QAAQ,QACRE,KAAM,CAAEpB,SAAU,GAAIF,WAAY,UAAWJ,KAAM,QAASK,WAAY,OACxEsB,UAAU,EACVC,UAAU,EACVK,SAAU,EAAE,UAGZ,SAACJ,EAAA,EAAK,CAAChC,MAAM,aAAaqC,OAAQ,GAAIH,SAAS,aAAazE,MAAO,CAAEgD,SAAU,GAAIF,WAAY,UAAWJ,KAAM,UAAWK,WAAY,YAEzI,SAAC8B,EAAA,EAAO,CACNC,OAAQ,CAAEpC,KAAM,eAChBqC,aAAc,CACZtF,gBAAiB,yBACjBC,UAAW,gCACXsF,eAAgB,aAChBC,qBAAsB,aACtBrG,MAAO,QACPoE,SAAU,OACVF,WAAY,wBACZvD,aAAc,SACd2F,OAAQ,WAGZ,SAACC,EAAA,EAAG,CAACC,QAAS,GAAIC,OAAQ,GACxBnB,QAAQ,QACRxB,KAAK,oBAOb,SAAC/C,EAAA,EAAG,CAACwD,GAAI,EAAE,UACT,SAACmC,EAAA,GAAI,CAACC,WAAS,EAACC,eAAe,SAASnG,QAAS,GAAI,SA/GxC,CACjB,CAAEiD,MAAO,YAAa1D,MAAO,WAC7B,CAAE0D,MAAO,OAAQ1D,MAAO,WACxB,CAAE0D,MAAO,OAAQ1D,MAAO,WACxB,CAAE0D,MAAO,OAAQ1D,MAAO,WACxB,CAAE0D,MAAO,YAAa1D,MAAO,YA2GXwD,KAAI,SAACqD,EAAMC,GAAK,OAC1B,SAACJ,EAAA,GAAI,CAACG,MAAI,EAACE,GAAI,IAAKC,GAAI,IAAKC,GAAI,IAAKC,GAAI,IAAI,UAC5C,UAACC,EAAA,EAAM,CAACzH,QAAQ,YAAYK,GAAI,CAAEY,aAAc,GAAIyD,SAAU,EAAGgD,QAAS,UAAWvG,gBAAiB,UAAWC,UAAW,QAAS,WACnI,gBAAKM,MAAO,CAAEJ,MAAO,EAAGC,OAAQ,EAAGJ,gBAAiBgG,EAAK7G,MAAOW,aAAc,MAAO0G,YAAa,MAClG,SAAC5H,EAAA,EAAU,CAACC,QAAQ,QAAQ0B,MAAO,CAAEgD,SAAU,GAAIF,WAAY,WAAY,SAAE2C,EAAKnD,YAHlCoD,EAK7C,WAMnB,C,sICtLe,SAASQ,EAAsB,GAAqC,IAAD,EAAlC1H,EAAK,EAALA,MAAkBG,GAAF,EAATyB,UAAa,EAAFzB,IAAOI,GAAK,YAC5E,GAAkCpB,EAAAA,EAAAA,UAAS,IAAG,eAAvCwE,EAAS,KAAEgE,EAAY,KAC9B,GAA8BxI,EAAAA,EAAAA,WAAS,GAAK,eAArCyI,EAAO,KAAEC,EAAU,KAC1B,GAA8C1I,EAAAA,EAAAA,UAAS,MAAK,eAArD2I,EAAe,KAAEC,EAAkB,MAE1CzI,EAAAA,EAAAA,YAAU,WACRoE,GACF,GAAG,IAGL,IAAMA,EAAS,yCAAG,wHAEStB,MAAM,qBAAqB,KAAD,EAAnC,OAARC,EAAQ,gBACKA,EAASG,OAAO,KAAD,EAA5BC,EAAI,OAEJuF,EAAmBvF,EAAKuF,iBAE9BD,EAAmB,CACjBjF,UAAWkF,EACX1E,IAAK2E,KAAKC,IAAG,MAARD,MAAI,OAAQxF,EAAK0F,iCAGlBxE,EAAYlB,EAAK0F,6BAA6BvE,KAAI,SAACG,EAAOmD,GAAK,eACnEpD,MAAM,WAAD,OAAasE,OAAOC,aAAa,GAAKnB,KAC1ClH,EAAQgE,WAAWD,EAAME,QAAQ,IAAG,IAGvC0D,EAAahE,GACbkE,GAAW,GAAO,kDAElBrE,QAAQC,MAAM,uBAAuB,EAAD,IACpCoE,GAAW,GAAO,0DAErB,kBAvBc,mCA2Bb,GAAIC,EAAiB,CACnB,IAAMxE,EAAMwE,EAAgBxE,IACxBA,GAAO,GAAKA,GAAO,GACJ,YACRA,EAAM,IAAMA,GAAO,GACX,OACRA,EAAM,IAAMA,GAAO,GACX,OACRA,EAAM,IAAMA,GAAO,IACX,OACRA,EAAM,KAAOA,GAAO,KACZ,WAErB,CAEA,IAAMgF,EAAgBR,EAAe,UAAMA,EAAgBhF,UAAS,uBAAwB,GAG5F,OACE,UAACpC,EAAA,GAAI,gBACHG,QAAS,EACTV,IAAE,QACAgE,GAAI,EACJC,GAAI,EACJrD,aAAc,IACXZ,IAEDI,GAAK,eAET,SAAC8D,EAAA,EAAU,CACTrE,OACE,SAACH,EAAA,EAAU,CACRC,QAAQ,KACR0B,MAAO,CAAEpB,MAAO,QACPkE,WAAY,wBACZC,WAAY,IACZC,SAAU,GACVC,cAAe,YACfC,WAAY,GAAI,SACzB1E,IAGL4B,WACE,SAAC/B,EAAA,EAAU,CACRC,QAAQ,YACR0B,OAAK,GAAIpB,MAAO,QACPkE,WAAY,UACZC,WAAY,IACZC,SAAU,GACVE,WAAY,IAAC,iBACN,YAAS,qBACL,SAAO,GAAG,SAE9B4D,OAKP,UAACnH,EAAA,EAAG,CAACwD,GAAI,EAAGxE,GAAI,CAAEyE,GAAI,GAAI,UACvBgD,GACC,SAAC/H,EAAA,EAAU,UAAC,gBAEZ,SAACgF,EAAA,EAAmB,CAACzD,MAAM,OAAOC,OAAQ,IAAI,UAC5C,UAACkH,EAAA,EAAS,CAAC9F,KAAMkB,EAAWvC,MAAO,GAAIC,OAAQ,IAAI,WACjD,2BACE,4BAAgBmH,GAAG,UAAUC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAG,WACtD,iBAAM5C,OAAO,KAAK6C,UAAU,UAAUC,YAAa,MACnD,iBAAM9C,OAAO,MAAM6C,UAAU,UAAUC,YAAa,UAGxD,SAAC5C,EAAA,EAAK,CACJ6C,YAAY,QACZnD,KAAM,CAAEpB,SAAU,GAAIF,WAAY,UAAWJ,KAAM,QAASK,WAAY,OACxEsB,UAAU,EACVC,UAAU,EACV1E,MAAO,GACP4H,MA5DK,CAAC,EAAG,GAAI,GAAI,GAAI,IA6DrB7C,SAAS,sBAEX,SAACf,EAAA,EAAa,CACdC,gBAAgB,MAChBC,YAAY,EACZC,UAAU,EACVC,OAAO,8BAEP,SAACa,EAAA,EAAO,CACNC,OAAQ,CAAEpC,KAAM,eAChBqC,aAAc,CACZtF,gBAAiB,yBACjBC,UAAW,gCACXsF,eAAgB,aAChBC,qBAAsB,aACtBrG,MAAO,QACPoE,SAAU,GACVF,WAAY,wBACZvD,aAAc,SACd2F,OAAQ,WAGZ,SAACuC,EAAA,EAAI,CACHtD,KAAK,WACLD,QAAS1F,EACTwF,OAAO,UACPtB,KAAK,gBACLgF,YAAa,EACbC,KAAK,EACLC,UAAW,CAAEC,EAAG,WAKxB,SAAClI,EAAA,EAAG,CAACwD,GAAI,EAAG2E,GAAI,EAAGnJ,GAAI,CAAEyE,GAAI,GAAI,SAC9BkD,IACC,UAACjI,EAAA,EAAU,CAACC,QAAQ,YACR0B,MAAO,CAAE+H,UAAW,OACpBnJ,MAAO,QAASoE,SAChB,GAAID,WAAY,MAChBD,WAAY,WAAY,UAAC,wDAElC,4BAASwD,EAAgBhF,YAAmB,6IAU3D,C,qHC7Ke,SAAS0G,EAAe,GAAO,EAALxJ,MAAgB,EAAT4B,UAAkC,IAAvB6H,EAAI,EAAJA,KAAMtJ,EAAE,EAAFA,GAAOI,GAAK,YAGrEmJ,EAAc,CAClBC,cAAe,OACf,UAAW,CACT1I,gBAAiB,YAMrB,OACE,SAACP,EAAA,GAAI,gBAACG,QAAS,EAAGV,IAAE,QAAIgE,GAAI,EAAGC,GAAI,EAAGwF,UAAW,QAAWzJ,IAAUI,GAAK,cACzE,SAACsJ,EAAA,EAAK,CAAC1J,GAAI,CAAEY,aAAc,OAAQ+I,SAAU,OAAQ7I,gBAAiB,cAAeC,UAAW,QAAS,UACvG,UAAC6I,EAAA,EAAK,YACJ,SAACC,EAAA,EAAS,CAACxI,MAAO,CAAEP,gBAAiB,UAAWb,MAAO,QAASmE,WAAY,KAAM,UAChF,UAAC0F,EAAA,EAAQ,YACP,SAACC,EAAA,EAAS,CAAC/J,GAAI,CAAEC,MAAO,UAAWmE,WAAY,IAAKD,WAAY,UAAW6F,aAAc,OAAQlE,SAAU,SAAUjB,IAAK,EAAGoF,OAAQ,GAAI,SAAC,cAC1I,SAACF,EAAA,EAAS,CAAC/J,GAAI,CAAEC,MAAO,UAAWmE,WAAY,IAAKD,WAAY,UAAW6F,aAAc,OAAQlE,SAAU,SAAUjB,IAAK,EAAGoF,OAAQ,GAAI,SAAC,YAC1I,SAACF,EAAA,EAAS,CAAC/J,GAAI,CAAEC,MAAO,UAAWmE,WAAY,IAAKD,WAAY,UAAW6F,aAAc,OAAQlE,SAAU,SAAUjB,IAAK,EAAGoF,OAAQ,GAAI,SAAC,UAC1I,SAACF,EAAA,EAAS,CAAC/J,GAAI,CAAEC,MAAO,UAAWmE,WAAY,IAAKD,WAAY,UAAW6F,aAAc,OAAQlE,SAAU,SAAUjB,IAAK,EAAGoF,OAAQ,GAAI,SAAC,iBAG9I,SAACC,EAAA,EAAS,UACPZ,EAAK7F,KAAI,SAACqD,EAAMC,GAAK,OACpB,UAAC+C,EAAA,EAAQ,YACP,SAACC,EAAA,EAAS,CAACpK,QAAQ,YAAYK,GAAI,CAAEgK,aAAc,oBAAqB/J,MAAO,UAAWkE,WAAY,UAAWC,WAAY,OAAQ,SAAE0C,EAAKqD,eAC5I,SAACJ,EAAA,EAAS,CAACpK,QAAQ,YAAYK,GAAI,CAAEgK,aAAc,oBAAqB/J,MAAO,UAAWkE,WAAY,WAAY,SAAE2C,EAAKsD,UACzH,SAACL,EAAA,EAAS,CAACpK,QAAQ,YAAYK,GAAI,CAAEgK,aAAc,oBAAqB/J,MAAO,UAAWkE,WAAY,WAAY,UAAEkG,EAAAA,EAAAA,IAAUvD,EAAKwD,cACnI,SAACP,EAAA,EAAS,CAACpK,QAAQ,YAAYK,GAAI,CAAEgK,aAAc,oBAAqB/J,MAAO,UAAWkE,WAAY,WAAY,UAClH,SAACiD,EAAA,EAAM,CACP/F,MAAOkI,EACR5J,QAAQ,YACRK,GAAI,CACGc,gBAAiByJ,EAAyBzD,EAAK0D,QAC/CvK,MAAOwK,EAAmB3D,EAAK0D,QAC/BnD,QAAS,SACTjD,WAAY,MACZxD,aAAc,OACduD,WAAY,UACZI,WAAY,EACZxD,UAAW,OACXsD,SAAU,UACV,SAEDyC,EAAK0D,aApBG1D,EAAKuB,IAAMtB,EAuBf,aAOzB,CASA,SAASwD,EAAyBC,GAChC,OAAQA,GACN,IAAK,QACH,MAAO,UACT,IAAK,YACH,MAAO,UACT,IAAK,qBACH,MAAO,UACT,IAAK,gBACH,MAAO,UACT,QACE,MAAO,cAEb,CAEA,SAASC,EAAmBD,GAC1B,OAAQA,GACN,IAAK,QACH,MAAO,UACT,IAAK,YACH,MAAO,UACT,IAAK,qBACH,MAAO,UACT,IAAK,gBACH,MAAO,UACT,QACE,MAAO,QAEb,C,gDC5Fe,SAASE,GAAe,GAAiB,IAAhB1K,EAAE,EAAFA,GAAOI,GAAK,aAChD,GAAsCpB,EAAAA,EAAAA,UAAS,IAAG,eAA3C2L,EAAW,KAAEC,EAAc,KAClC,GAAsC5L,EAAAA,EAAAA,UAAS,IAAG,eAA3C6L,EAAW,KAAEC,EAAc,KAClC,GAAsC9L,EAAAA,EAAAA,WAAS,SAAC+L,EAAA,EAAoB,CAAC1J,MAAO,CAAEgD,SAAU,WAAa,eAA9F2G,EAAW,KAAEC,EAAc,KAClC,GAA8CjM,EAAAA,EAAAA,UAAS,WAAU,eAA1D8B,EAAe,KAAEoK,EAAkB,KA6C1C,OA1CA/L,EAAAA,EAAAA,YAAU,WACN,IAkCMgM,EAAaC,aAlCQ,WACzB,IAAMC,EAAM,IAAIhM,KAGVD,EAAQiM,EAAI/L,WAGdF,GAAS,GAAKA,EAAQ,IACxB6L,GAAe,SAACF,EAAA,EAAoB,CAAC1J,MAAO,CAAEgD,SAAU,WACxD6G,EAAmB,aAEnBD,GAAe,SAACK,GAAA,EAAkB,CAACjK,MAAO,CAAEgD,SAAU,WACtD6G,EAAmB,YAGrB,IAAMK,EAASnM,GAAS,GAAK,KAAO,KAE9BoM,EAAa,UADMpM,EAAQ,IAAM,GACE,YAAI6I,OAAOoD,EAAII,cAAcC,SAAS,EAAG,KAAI,YAAIzD,OAAOoD,EAAIM,cAAcD,SAAS,EAAG,KAAI,YAAIH,GAEvIX,EAAeY,GAGf,IACMI,EADa,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YACzDP,EAAIQ,UAE3BC,EADS,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACxET,EAAIU,YACnBC,EAAaX,EAAIY,UAEjBC,EAAa,UAAMN,EAAS,aAAKE,EAAK,YAAIE,GAEhDlB,EAAeoB,EACjB,GAGmD,KAGnD,OAAO,kBAAMC,cAAchB,EAAY,CACzC,GAAG,KAID,UAAC5K,EAAA,GAAI,gBACDC,UAAWC,EAAAA,EACXC,QAAS,EACTC,UAAU,MACVX,IAAE,QACEY,aAAc,GACdC,EAAG,EACHC,gBAAAA,EACAC,UAAW,OACX+E,SAAU,YACP9F,IAEHI,GAAK,eAET,SAACK,EAAA,EAAK,WACF,UAACA,EAAA,EAAK,CAAC2I,UAAW,GAAIgD,aAAc,EAAE,WACtC,SAAC1M,EAAA,EAAU,CACPC,QAAQ,KACRK,GAAI,CACJmE,WAAY,UACZC,WAAY,MACZnE,MAAO,UACPsB,WAAY,OACZgD,WAAY,IACV,SACL,WAGD,SAAC7E,EAAA,EAAU,CACPC,QAAQ,KACRK,GAAI,CACJmE,WAAY,wBACZC,WAAY,MACZnE,MAAO,QACPsB,WAAY,QACV,SAEDoJ,KAEL,SAACjL,EAAA,EAAU,CACPC,QAAQ,WACRK,GAAI,CACJmE,WAAY,UACZC,WAAY,MACZnE,MAAO,UACPsB,WAAY,OACZgD,WAAY,IACV,SAEDsG,UAMT,SAACwB,EAAA,EAAU,CAACrM,GAAI,CACAC,MAAO,QACP6F,SAAU,WACVjB,IAAK,GACLC,MAAO,GACPhE,gBAAAA,EACAqF,OAAQ,OACR,oBAAqB,CACrBrF,gBAAAA,IAGJwL,oBAAkB,EAClBC,oBAAkB,EAAC,SAE1BvB,OAIjB,CCvHe,SAASwB,KACtB,OAAwCxN,EAAAA,EAAAA,UAAS,IAAG,eAA7CyN,EAAY,KAAEC,EAAe,MAGpCvN,EAAAA,EAAAA,YAAU,WACRwN,IAGA,IAAMxB,EAAaC,YAAYuB,EAAoB,KAGnD,OAAO,kBAAMR,cAAchB,EAAY,CACzC,GAAG,IAEH,IAAMwB,EAAkB,yCAAG,0HAEqBC,QAAQC,IAAI,CAACC,IAAqBC,MAAmB,KAAD,0BAAzFC,EAAgB,KAAEC,EAAS,KAC5BC,EAAkBC,EAAmB,GAAD,eAAKV,IAAY,OAAKO,IAAgB,OAAKC,KACrFP,EAAgBQ,GAAiB,kDAEjC7J,QAAQC,MAAM,oCAAoC,EAAD,IAAS,0DAE7D,kBARuB,mCAUlBwJ,EAAiB,yCAAG,oHAEC7K,MAAM,0BAA0B,KAAD,EAAxC,OAARC,EAAQ,gBACKA,EAASG,OAAO,KAAD,EAAxB,OAAJC,EAAI,yBACHA,GAAI,QAE2C,MAF3C,0BAEXe,QAAQC,MAAM,gCAAgC,EAAD,IAAS,+DAGzD,kBATsB,mCAWjByJ,EAAc,yCAAG,oHAEI9K,MAAM,8BAA8B,KAAD,EAA5C,OAARC,EAAQ,gBACKA,EAASG,OAAO,KAAD,EAAxB,OAAJC,EAAI,yBACHA,GAAI,QAEwC,MAFxC,0BAEXe,QAAQC,MAAM,6BAA6B,EAAD,IAAS,+DAGtD,kBATmB,mCAWd6J,EAAqB,SAAC7K,GAC1B,OAAOA,EAAK8K,MAAK,SAACC,EAAGC,GAAC,OAAK,IAAIjO,KAAKiO,EAAEhD,WAAa,IAAIjL,KAAKgO,EAAE/C,UAAU,GAC1E,EAQA,OACE,0BACE,SAACiD,EAAA,EAAS,CAACC,SAAS,KAAI,UACtB,UAAC7G,EAAA,GAAI,CAACC,WAAS,EAAClG,QAAS,EAAG8D,GAAI,EAAE,WAChC,SAACmC,EAAA,GAAI,CAACG,MAAI,EAACE,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAE,UACtC,SAAC,EAAgB,CACfnH,GAAI,CACFc,gBAAiB,UACjBkD,GAAI,EACJC,GAAI,GAENpE,OAAO,SAAC,EAAQ,IAChBC,YAAaA,EACbI,UAAU,WAId,SAACyG,EAAA,GAAI,CAACG,MAAI,EAACE,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAE,UACtC,SAACuD,GAAc,CACb1K,GAAI,CACFc,gBAAiB,gBAKvB,SAAC6F,EAAA,GAAI,CAACG,MAAI,EAACE,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAE,UACtC,SAAC3F,EAAa,CACZ3B,MAAM,iCACN4B,WAAS,EACTzB,GAAI,CACFc,gBAAiB,gBAKvB,SAAC6F,EAAA,GAAI,CAACG,MAAI,EAACE,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAE,UACtC,SAACI,EAAqB,CACpB1H,MAAM,uBACNG,GAAI,CACFc,gBAAiB,gBAKvB,UAAC6F,EAAA,GAAI,CAACG,MAAI,EAACE,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAI1C,GAAI,EAAGnD,MAAO,CAAEC,QAAQ,OAAQmM,cAAe,UAAW,WAC3F,iBACEpM,MAAO,CAAEpB,MAAO,QACPkE,WAAY,wBACZC,WAAY,IACZC,SAAU,GACVC,cAAe,aACZ,SAAC,2BAGf,iBACAjD,MAAO,CAAEpB,MAAO,UACPkE,WAAY,UACZC,WAAY,IACZC,SAAU,IACP,SAAC,2DAKf,SAACsC,EAAA,GAAI,CAACG,MAAI,EAACE,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAG,UAChC,SAACmC,EAAc,CACbrJ,GAAI,CACFc,gBAAiB,UACjBC,UAAW,OACX6D,OAAQ,EACRyC,QAAS,EACTqG,UAAW,QACXC,UAAW,SACX,UAAW,CACTA,UAAW,SAGfrE,KAnFqB,SAAChH,GAChC,IAAMsL,EAAc,IAAIvO,KAExB,OADAuO,EAAYC,QAAQD,EAAY3B,UAAY,IACrC3J,EAAKwL,QAAO,SAAAhH,GAAI,OAAI,IAAIzH,KAAKyH,EAAKwD,WAAasD,CAAW,GACnE,CA+EkBG,CAAyBtB,aAQ7C,CCpJe,SAASuB,KACpB,OACI,gBAAKzO,UAAU,OAAM,UAEjB,SAAEiN,GAAQ,KAGtB,C,4BCPIyB,EAAyBC,EAAQ,OAIrCC,EAAQ,OAAU,EAClB,IAAIC,EAAiBH,EAAuBC,EAAQ,QAChDG,EAAcH,EAAQ,OACtBI,GAAW,EAAIF,EAAeG,UAAuB,EAAIF,EAAYG,KAAK,OAAQ,CACpFC,EAAG,sLACD,kBACJN,EAAQ,EAAUG,C,4BCVdL,EAAyBC,EAAQ,OAIrCC,EAAQ,OAAU,EAClB,IAAIC,EAAiBH,EAAuBC,EAAQ,QAChDG,EAAcH,EAAQ,OACtBI,GAAW,EAAIF,EAAeG,UAAuB,EAAIF,EAAYG,KAAK,OAAQ,CACpFC,EAAG,+xBACD,oBACJN,EAAQ,EAAUG,C","sources":["components/elements/Greetings.js","sections/app-widget-summary.jsx","sections/appWQISummary.jsx","sections/appPerformanceSummary.jsx","sections/appLogTimeline.jsx","sections/appTimeDisplay.jsx","sections/view/Overview.jsx","pages/Dashboard.jsx","../node_modules/@mui/icons-material/BedtimeRounded.js","../node_modules/@mui/icons-material/LightModeRounded.js"],"sourcesContent":["import { Typography } from '@mui/material';\r\nimport React, { useEffect, useState } from 'react';\r\nimport '../styles/GreetingStyle.css';\r\nimport { useAuthContext } from '../../hooks/useAuthContext';\r\n\r\nconst TimeGreetings = () => {\r\n  const [greeting, setGreeting] = useState('');\r\n\r\n  useEffect(() => {\r\n    const date = new Date();\r\n    const hours = date.getHours();\r\n    let greetingMessage;\r\n\r\n    if (hours < 12) {\r\n      greetingMessage = 'Morning,';\r\n    } else if (hours >= 12 && hours < 17) {\r\n      greetingMessage = 'Afternoon,';\r\n    } else {\r\n      greetingMessage = 'Evening,';\r\n    }\r\n\r\n    setGreeting(greetingMessage);\r\n  }, []);\r\n\r\n  return <span className='greeting-mood'>{greeting}</span>;\r\n};\r\n\r\nconst Greeting = () => {\r\n  const { user } = useAuthContext(); // Destructure user from the context\r\n\r\n  return (\r\n    <div>\r\n      <Typography variant=\"h4\">\r\n        <span className='subject-greet'>Good</span> <TimeGreetings />{' '}\r\n      </Typography>\r\n      <Typography variant=\"h4\">\r\n        {user && <span className='user-greet'>{user.username}</span>}\r\n      </Typography>\r\n      <Typography variant=\"h7\">\r\n        <span className='sub-greet'>Uncover water insights in your local</span>\r\n      </Typography>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Greeting;\r\n","import PropTypes from 'prop-types';\r\nimport Box from '@mui/material/Box';\r\nimport Card from '@mui/material/Card';\r\nimport Stack from '@mui/material/Stack';\r\nimport Typography from '@mui/material/Typography';\r\nimport { useMediaQuery } from '@mui/material';\r\nimport '../components/styles/ImageStyle.css';\r\n\r\nfunction AppWidgetSummary({\r\n  title,\r\n  imageSource,\r\n  icon,\r\n  color = 'primary',\r\n  sx,\r\n  imageSize,\r\n  stationHolder,\r\n  ...other\r\n}) {\r\n  const isXsOrSm = useMediaQuery('(max-width:600px)'); // Media query for extra small and small screens\r\n\r\n  return (\r\n    <Card\r\n      component={Stack}\r\n      spacing={2}\r\n      direction=\"row\"\r\n      sx={{\r\n        borderRadius: 10,\r\n        m: 1,\r\n        backgroundColor: '#10273d',\r\n        boxShadow: 'none',\r\n        ...sx,\r\n      }}\r\n      {...other}\r\n    >\r\n      {icon && <Box sx={{ width: 64, height: 64 }}>{icon}</Box>}\r\n\r\n      <Stack>\r\n        <Typography variant=\"subtitle2\" sx={{ color: 'text.disabled' }}>\r\n          {title}\r\n        </Typography>\r\n        {stationHolder && (\r\n          <Stack>\r\n            {stationHolder} {/* Render the StationCarousel directly */}\r\n          </Stack>\r\n        )}\r\n      </Stack>\r\n\r\n      {!isXsOrSm && ( // Conditionally render the img based on screen size\r\n        <img\r\n          src={imageSource}\r\n          alt=\"Widget Image\"\r\n          style={{ width: imageSize, height: 'auto', display: 'block', marginLeft: '3rem' }}\r\n          className=\"responsive-image\"\r\n        />\r\n      )}\r\n    </Card>\r\n  );\r\n}\r\n\r\nAppWidgetSummary.propTypes = {\r\n  color: PropTypes.string,\r\n  icon: PropTypes.oneOfType([PropTypes.element, PropTypes.string]),\r\n  imageSource: PropTypes.string,\r\n  sx: PropTypes.object,\r\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  stationHolder: PropTypes.node, // Allow any node, including StationCarousel\r\n  total: PropTypes.number,\r\n};\r\n\r\nexport default AppWidgetSummary;\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, CartesianGrid, Label } from 'recharts'; // Import Label from 'recharts'\r\n\r\nimport Box from '@mui/material/Box';\r\nimport Card from '@mui/material/Card';\r\nimport CardHeader from '@mui/material/CardHeader';\r\nimport { Typography, Button } from '@mui/material';\r\nimport Grid from '@mui/material/Grid';\r\n\r\nexport default function AppWQISummary({ title, subheader, chart, sx, ...other }) {\r\n  const [stationData, setStationData] = useState([]);\r\n  const [lowestStation, setLowestStation] = useState(null);\r\n  const [highestStation, setHighestStation] = useState(null);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        const response = await fetch('/api/realm/calculateWQI');\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch data');\r\n        }\r\n        const data = await response.json();\r\n\r\n        // Initialize an empty array to store the latest data for each station\r\n        const newData = [];\r\n\r\n        // Iterate over each station\r\n        Object.keys(data).forEach(stationId => {\r\n          // Find the entry with the latest date\r\n          const latestDate = Object.keys(data[stationId]).reduce((prev, current) => {\r\n            return (new Date(current) > new Date(prev)) ? current : prev;\r\n          });\r\n\r\n          // Get the latest entry for the station\r\n          const latestEntry = data[stationId][latestDate];\r\n\r\n          // Add the latest entry to the newData array\r\n          newData.push({\r\n            stationId,\r\n            ...latestEntry\r\n          });\r\n        });\r\n\r\n        setStationData(newData);\r\n\r\n        // Find the station with the lowest and highest WQI values\r\n        const lowest = newData.reduce((prev, current) => (prev.wqi < current.wqi) ? prev : current);\r\n        const highest = newData.reduce((prev, current) => (prev.wqi > current.wqi) ? prev : current);\r\n        setLowestStation(lowest);\r\n        setHighestStation(highest);\r\n      } catch (error) {\r\n        console.error('Error fetching station data:', error);\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Function to determine color based on WQI value\r\n  const getColor = (value) => {\r\n    if (value >= 0 && value <= 25) return '#A1E6A6'; // Green\r\n    if (value > 25 && value <= 50) return '#FFFF80'; // Faded Green\r\n    if (value > 50 && value <= 75) return '#EEFF51'; // Almost Yellow\r\n    if (value > 75 && value <= 100) return '#F5B748'; // Almost Orange\r\n    if (value > 100 && value <= 150) return '#FF6551'; // Red\r\n    return '#8CACFF'; // Default color\r\n  };\r\n\r\n  // Legend data remains the same\r\n  const legendData = [\r\n    { label: 'Excellent', color: '#A1E6A6' },\r\n    { label: 'Good', color: '#FFFF80' },\r\n    { label: 'Fair', color: '#EEFF51' },\r\n    { label: 'Poor', color: '#F5B748' },\r\n    { label: 'Very Poor', color: '#FF6551' },\r\n  ];\r\n\r\n  // Chart data will now be based on convertedData\r\n  const chartData = stationData.map(station => ({\r\n    label: station.stationId,\r\n    value: parseFloat(station.wqi.toFixed(2)),\r\n    fill: getColor(station.wqi)\r\n  }));\r\n\r\n  return (\r\n    <Card \r\n      spacing={3}\r\n      sx={{\r\n        px: 4,\r\n        py: 4,\r\n        borderRadius: 10,\r\n        ...sx,\r\n      }}\r\n      {...other}\r\n    >\r\n      <CardHeader\r\n        title={\r\n          <Typography variant=\"h6\" \r\n                      style={{ color: 'white', \r\n                               fontFamily: \"Archivo, 'sans-serif'\", \r\n                               fontWeight: 500,\r\n                               fontSize: 25, \r\n                               textTransform: 'uppercase',\r\n                            }}\r\n            >\r\n            {title}\r\n          </Typography>\r\n        }\r\n        subheader={\r\n          <Typography variant=\"subtitle1\" \r\n                    style={{ color: '#8cacff', \r\n                            fontFamily: \"Poppins\", \r\n                            fontWeight: 100,\r\n                            fontSize: 13,\r\n                            lineHeight: 0.9,\r\n                            }}\r\n            >\r\n            {subheader} \r\n            {lowestStation && highestStation && \r\n              `Based on the latest readings of the stations the optimal water source is ${lowestStation.stationId}, and the station with less desirable quality is ${highestStation.stationId}`}\r\n          </Typography>\r\n        }\r\n      />\r\n\r\n      <Box mt={2} sx={{ mx: 1 }}>\r\n      <ResponsiveContainer width=\"100%\" height={200}>\r\n          <BarChart\r\n            data={chartData}\r\n            margin={{ top: 0, right: 0, left: 0, bottom: 0 }}>\r\n            <CartesianGrid\r\n              strokeDasharray=\"1 0\"\r\n              horizontal={true}\r\n              vertical={false}\r\n              stroke=\"rgba(100, 100, 100, 0.7)\"\r\n            />\r\n            <XAxis\r\n              dataKey=\"label\"\r\n              type=\"category\"\r\n              tick={{ fontSize: 10, fontFamily: \"Poppins\", fill: '#ffff', fontWeight: '300' }}\r\n              axisLine={false}\r\n              tickLine={false}\r\n              width={30} // Adjust the width as needed\r\n            >\r\n              {/* Add X-axis title */}\r\n              <Label value=\"Recorded Stations\" offset={-8} position=\"bottom\" style={{ fontSize: 12, fontFamily: \"Poppins\", fill: '#8cacff', fontWeight: '700' }} />\r\n            </XAxis>\r\n            <YAxis // YAxis becomes horizontal\r\n              dataKey=\"value\"\r\n              tick={{ fontSize: 10, fontFamily: \"Poppins\", fill: '#ffff', fontWeight: '300' }}\r\n              axisLine={false}\r\n              tickLine={false}\r\n              interval={0}\r\n            >\r\n              {/* Add Y-axis title */}\r\n              <Label value=\"WQI Values\" angle={-90} position=\"insideLeft\" style={{ fontSize: 12, fontFamily: \"Poppins\", fill: '#8cacff', fontWeight: '700' }} />\r\n            </YAxis>\r\n            <Tooltip\r\n              cursor={{ fill: 'transparent' }}\r\n              contentStyle={{\r\n                backgroundColor: 'rgba(13, 33, 53, 0.32)',\r\n                boxShadow: '0 4px 30px rgba(0, 0, 0, 0.1)',\r\n                backdropFilter: 'blur(15px)',\r\n                WebkitBackdropFilter: 'blur(15px)',\r\n                color: 'white',\r\n                fontSize: '1rem',\r\n                fontFamily: \"'Archivo', sans-serif\",\r\n                borderRadius: '0.5rem',\r\n                border: 'none'\r\n              }}\r\n            />\r\n            <Bar barSize={30} radius={10}\r\n              dataKey=\"value\"\r\n              fill=\"#A1E6A6\"\r\n            />\r\n          </BarChart>\r\n        </ResponsiveContainer>\r\n      </Box>\r\n\r\n      {/* Legend */}\r\n      <Box mt={5}>\r\n        <Grid container justifyContent=\"center\" spacing={0.8}>\r\n          {legendData.map((item, index) => (\r\n            <Grid item xs={2.5} sm={2.5} md={2.5} lg={1.9} key={index}>\r\n              <Button variant=\"contained\" sx={{ borderRadius: 20, fontSize: 3, padding: '5px 8px', backgroundColor: '#0d2135', boxShadow: 'none' }}>\r\n                <div style={{ width: 8, height: 8, backgroundColor: item.color, borderRadius: '50%', marginRight: 5 }}></div>\r\n                <Typography variant=\"body2\" style={{ fontSize: 10, fontFamily: 'Poppins' }}>{item.label}</Typography>\r\n              </Button>\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      </Box>\r\n    </Card>\r\n  );\r\n}\r\n\r\nAppWQISummary.propTypes = {\r\n  chart: PropTypes.object,\r\n  subheader: PropTypes.string,\r\n  title: PropTypes.string,\r\n  sx: PropTypes.object,\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  AreaChart,\r\n  Area,\r\n  CartesianGrid,\r\n  YAxis,\r\n  Tooltip,\r\n  ResponsiveContainer\r\n} from 'recharts';\r\nimport { Box, CardHeader, Card, Typography } from '@mui/material';\r\n\r\nexport default function AppPerformanceSummary({ title, subheader, sx, ...other }) {\r\n  const [chartData, setChartData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [bestStationInfo, setBestStationInfo] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n// Inside the fetchData function\r\nconst fetchData = async () => {\r\n  try {\r\n    const response = await fetch('/api/realm/lowWQI');\r\n    const data = await response.json();\r\n\r\n    const maxLowWQIStation = data.maxLowWQIStation; // Fetching the maxLowWQIStation value from the response data\r\n\r\n    setBestStationInfo({\r\n      stationId: maxLowWQIStation, // Using maxLowWQIStation as the stationId\r\n      wqi: Math.min(...data.wqiValuesOfIdentifiedStation) // Calculating the lowest WQI directly from the response data\r\n    });\r\n\r\n    const chartData = data.wqiValuesOfIdentifiedStation.map((value, index) => ({\r\n      label: `Station ${String.fromCharCode(65 + index)}`,\r\n      [title]: parseFloat(value.toFixed(2)),\r\n    }));\r\n\r\n    setChartData(chartData);\r\n    setLoading(false);\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error);\r\n    setLoading(false);\r\n  }\r\n};\r\n\r\n\r\n  let interpretation = '';\r\n  if (bestStationInfo) {\r\n    const wqi = bestStationInfo.wqi;\r\n    if (wqi >= 0 && wqi <= 25) {\r\n      interpretation = 'Excellent';\r\n    } else if (wqi > 25 && wqi <= 50) {\r\n      interpretation = 'Good';\r\n    } else if (wqi > 50 && wqi <= 75) {\r\n      interpretation = 'Fair';\r\n    } else if (wqi > 75 && wqi <= 100) {\r\n      interpretation = 'Poor';\r\n    } else if (wqi > 100 && wqi <= 150) {\r\n      interpretation = 'Very Poor';\r\n    }\r\n  }\r\n\r\n  const subheaderText = bestStationInfo ? `${bestStationInfo.stationId} has the lowest WQI` : '';\r\n  const yAxisTicks = [0, 20, 40, 60, 80];\r\n\r\n  return (\r\n    <Card\r\n      spacing={3}\r\n      sx={{\r\n        px: 4,\r\n        py: 2,\r\n        borderRadius: 10,\r\n        ...sx,\r\n      }}\r\n      {...other}\r\n    >\r\n      <CardHeader\r\n        title={\r\n          <Typography \r\n             variant=\"h6\" \r\n             style={{ color: 'white', \r\n                      fontFamily: \"Archivo, 'sans-serif'\", \r\n                      fontWeight: 500, \r\n                      fontSize: 23, \r\n                      textTransform: 'uppercase', \r\n                      lineHeight: 1 }}>\r\n            {title}\r\n          </Typography>\r\n        }\r\n        subheader={\r\n          <Typography \r\n             variant=\"subtitle1\" \r\n             style={{ color: 'white', \r\n                      fontFamily: \"Poppins\", \r\n                      fontWeight: 100, \r\n                      fontSize: 13, \r\n                      lineHeight: 1, \r\n                      color: '#8cacff', \r\n                      marginTop: '1.5px' }}>\r\n            \r\n            {subheaderText}\r\n          </Typography>\r\n        }\r\n      />\r\n\r\n      <Box mt={2} sx={{ mx: 3 }}>\r\n        {loading ? (\r\n          <Typography>Loading...</Typography>\r\n        ) : (\r\n          <ResponsiveContainer width=\"100%\" height={200}>\r\n            <AreaChart data={chartData} width={80} height={100}>\r\n              <defs>\r\n                <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                  <stop offset=\"5%\" stopColor=\"#8CACFF\" stopOpacity={0.8} />\r\n                  <stop offset=\"95%\" stopColor=\"#8CACFF\" stopOpacity={0} />\r\n                </linearGradient>\r\n              </defs>\r\n              <YAxis\r\n                orientation=\"right\"\r\n                tick={{ fontSize: 10, fontFamily: \"Poppins\", fill: '#ffff', fontWeight: '300' }}\r\n                axisLine={false}\r\n                tickLine={false}\r\n                width={20}\r\n                ticks={yAxisTicks}\r\n                interval=\"preserveStartEnd\" \r\n              />\r\n              <CartesianGrid\r\n              strokeDasharray=\"1 0\"\r\n              horizontal={true}\r\n              vertical={false}\r\n              stroke=\"rgba(100, 100, 100, 0.7)\"\r\n            />\r\n              <Tooltip\r\n                cursor={{ fill: 'transparent' }}\r\n                contentStyle={{\r\n                  backgroundColor: 'rgba(13, 33, 53, 0.32)',\r\n                  boxShadow: '0 4px 30px rgba(0, 0, 0, 0.1)',\r\n                  backdropFilter: 'blur(15px)',\r\n                  WebkitBackdropFilter: 'blur(15px)',\r\n                  color: 'white',\r\n                  fontSize: 13,\r\n                  fontFamily: \"'Archivo', sans-serif\",\r\n                  borderRadius: '0.5rem',\r\n                  border: 'none',\r\n                }}\r\n              />\r\n              <Area\r\n                type=\"monotone\"\r\n                dataKey={title}\r\n                stroke=\"#8CACFF\"\r\n                fill=\"url(#colorUv)\"\r\n                strokeWidth={4}\r\n                dot={false}\r\n                activeDot={{ r: 6 }}\r\n              />\r\n            </AreaChart>\r\n          </ResponsiveContainer>\r\n        )}\r\n        <Box mt={3} mb={2} sx={{ mx: 1 }}>\r\n          {bestStationInfo && (\r\n            <Typography variant=\"subheader\" \r\n                        style={{ marginTop: '1rem', \r\n                        color: 'white', fontSize: \r\n                        13, fontWeight: '300', \r\n                        fontFamily: \"Poppins\" }}>\r\n              According to the collected water quality data, the \r\n              \"<strong>{bestStationInfo.stationId}</strong>\" exhibits the\r\n               lowest WQI readings compared to all other stations,\r\n              indicating a better water quality at this specific location.\r\n\r\n            </Typography>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n    </Card>\r\n  )\r\n}\r\n\r\nAppPerformanceSummary.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  sx: PropTypes.object,\r\n};\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Card, Table, TableHead, TableBody, TableRow, TableCell, Paper, Button } from '@mui/material';\r\nimport { fDateTime } from '../utils/formatTme';\r\n\r\nexport default function AppLogTimeline({ title, subheader, list, sx, ...other }) {\r\n\r\n\r\n  const buttonStyle = {\r\n    pointerEvents: 'none',\r\n    '&:hover': {\r\n      backgroundColor: 'inherit', // optional: retain original background color on hover\r\n    },\r\n  };\r\n\r\n  \r\n\r\n  return (\r\n    <Card spacing={1} sx={{ px: 1, py: 1, overflowX: 'auto', ...sx }} {...other}>\r\n      <Paper sx={{ borderRadius: '15px', overflow: 'auto', backgroundColor: 'transparent', boxShadow: 'none' }}>\r\n        <Table>\r\n          <TableHead style={{ backgroundColor: '#001227', color: 'white', fontWeight: 600 }}>\r\n            <TableRow>\r\n              <TableCell sx={{ color: '#8cacff', fontWeight: 600, fontFamily: 'Poppins', borderBottom: 'none', position: 'sticky', top: 0, zIndex: 1 }}>Stations</TableCell>\r\n              <TableCell sx={{ color: '#8cacff', fontWeight: 600, fontFamily: 'Poppins', borderBottom: 'none', position: 'sticky', top: 0, zIndex: 1 }}>Tester</TableCell>\r\n              <TableCell sx={{ color: '#8cacff', fontWeight: 600, fontFamily: 'Poppins', borderBottom: 'none', position: 'sticky', top: 0, zIndex: 1 }}>Date</TableCell>\r\n              <TableCell sx={{ color: '#8cacff', fontWeight: 600, fontFamily: 'Poppins', borderBottom: 'none', position: 'sticky', top: 0, zIndex: 1 }}>Status</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {list.map((item, index) => (\r\n              <TableRow key={item.id || index}>\r\n                <TableCell variant=\"subtitle2\" sx={{ borderBottom: '1px solid #03324e', color: '#8cacff', fontFamily: 'Poppins', fontWeight: '700' }}>{item.stationName}</TableCell>\r\n                <TableCell variant=\"subtitle2\" sx={{ borderBottom: '1px solid #03324e', color: '#8cacff', fontFamily: 'Poppins' }}>{item.tester}</TableCell>\r\n                <TableCell variant=\"subtitle2\" sx={{ borderBottom: '1px solid #03324e', color: '#8cacff', fontFamily: 'Poppins' }}>{fDateTime(item.dateAdded)}</TableCell>\r\n                <TableCell variant=\"subtitle2\" sx={{ borderBottom: '1px solid #03324e', color: '#8cacff', fontFamily: 'Poppins' }}>\r\n                <Button\r\n                style={buttonStyle}\r\n               variant=\"contained\"\r\n               sx={{\r\n                      backgroundColor: getStatusBackgroundColor(item.status),\r\n                      color: getStatusFontColor(item.status),\r\n                      padding: '0.5rem',\r\n                      fontWeight: '600',\r\n                      borderRadius: '3rem',\r\n                      fontFamily: 'Poppins',\r\n                      lineHeight: 1,\r\n                      boxShadow: 'none',\r\n                      fontSize: '0.7rem',\r\n                    }}\r\n                  >\r\n                    {item.status}\r\n                </Button>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </Paper>\r\n    </Card>\r\n  );\r\n}\r\n\r\nAppLogTimeline.propTypes = {\r\n  list: PropTypes.array,\r\n  subheader: PropTypes.string,\r\n  title: PropTypes.string,\r\n  sx: PropTypes.object,\r\n};\r\n\r\nfunction getStatusBackgroundColor(status) {\r\n  switch (status) {\r\n    case 'Added':\r\n      return '#74a7f7';\r\n    case 'Monitored':\r\n      return '#ffff80';\r\n    case 'Recently Monitored':\r\n      return '#a1e6a6';\r\n    case 'Not Monitored':\r\n      return '#FAD5A5';\r\n    default:\r\n      return 'transparent';\r\n  }\r\n}\r\n\r\nfunction getStatusFontColor(status) {\r\n  switch (status) {\r\n    case 'Added':\r\n      return '#093887';\r\n    case 'Monitored':\r\n      return '#616106';\r\n    case 'Recently Monitored':\r\n      return '#043608';\r\n    case 'Not Monitored':\r\n      return '#CC5500';\r\n    default:\r\n      return 'black';\r\n  }\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Card, Stack, Typography, IconButton } from '@mui/material';\r\nimport LightModeRoundedIcon from '@mui/icons-material/LightModeRounded';\r\nimport BedtimeRoundedIcon from '@mui/icons-material/BedtimeRounded';\r\n\r\nexport default function AppTimeDisplay({sx, ...other}) {\r\n    const [currentTime, setCurrentTime] = useState('');\r\n    const [currentDate, setCurrentDate] = useState('');\r\n    const [currentIcon, setCurrentIcon] = useState(<LightModeRoundedIcon style={{ fontSize: '35px' }} />);\r\n    const [backgroundColor, setBackgroundColor] = useState('#10273d'); // Initial background color\r\n\r\n\r\n    useEffect(() => {\r\n        const getCurrentDateTime = () => {\r\n          const now = new Date();\r\n    \r\n          // Format time\r\n          const hours = now.getHours();\r\n    \r\n          // Determine the icon and background color based on the time\r\n          if (hours >= 5 && hours < 18) {\r\n            setCurrentIcon(<LightModeRoundedIcon style={{ fontSize: '35px' }} />);\r\n            setBackgroundColor('#8CACFF');\r\n          } else {\r\n            setCurrentIcon(<BedtimeRoundedIcon style={{ fontSize: '35px' }} />);\r\n            setBackgroundColor('#8CACFF');\r\n          }\r\n    \r\n          const amOrPm = hours >= 12 ? 'PM' : 'AM';\r\n          const twelveHourFormat = hours % 12 || 12;\r\n          const formattedTime = `${twelveHourFormat}:${String(now.getMinutes()).padStart(2, '0')}:${String(now.getSeconds()).padStart(2, '0')} ${amOrPm}`;\r\n    \r\n          setCurrentTime(formattedTime);\r\n    \r\n          // Format date\r\n          const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n          const dayOfWeek = daysOfWeek[now.getDay()];\r\n          const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n          const month = months[now.getMonth()];\r\n          const dayOfMonth = now.getDate();\r\n    \r\n          const formattedDate = `${dayOfWeek}, ${month} ${dayOfMonth}`;\r\n    \r\n          setCurrentDate(formattedDate);\r\n        };\r\n    \r\n        // Update the date and time every second\r\n        const intervalId = setInterval(getCurrentDateTime, 1000);\r\n    \r\n        // Cleanup interval on component unmount\r\n        return () => clearInterval(intervalId);\r\n      }, []);\r\n\r\n\r\n    return (\r\n        <Card\r\n            component={Stack}\r\n            spacing={3}\r\n            direction=\"row\"\r\n            sx={{\r\n                borderRadius: 10,\r\n                m: 1,\r\n                backgroundColor,\r\n                boxShadow: 'none',\r\n                position: 'relative',\r\n                ...sx,\r\n            }}\r\n            {...other}\r\n            >\r\n            <Stack>\r\n                <Stack marginTop={16} marginBottom={8}>\r\n                <Typography\r\n                    variant=\"h6\"\r\n                    sx={{\r\n                    fontFamily: \"Poppins\",\r\n                    fontWeight: '600',\r\n                    color: '#8CACFF',\r\n                    marginLeft: '30px',\r\n                    lineHeight: 0.2,\r\n                    }}\r\n                >\r\n                    TODAY\r\n                </Typography>\r\n                <Typography\r\n                    variant=\"h2\"\r\n                    sx={{\r\n                    fontFamily: \"'Archivo', sans-serif\",\r\n                    fontWeight: '600',\r\n                    color: 'white',\r\n                    marginLeft: '25px',\r\n                    }}\r\n                >\r\n                    {currentTime}\r\n                </Typography>\r\n                <Typography\r\n                    variant=\"subtitle\"\r\n                    sx={{\r\n                    fontFamily: \"Poppins\",\r\n                    fontWeight: '200',\r\n                    color: '#8CACFF',\r\n                    marginLeft: '30px',\r\n                    lineHeight: 0.2,\r\n                    }}\r\n                >\r\n                    {currentDate}\r\n                </Typography>\r\n                </Stack>\r\n            </Stack>\r\n\r\n            {/* Display the dynamically updated icon and background color */}\r\n            <IconButton sx={{\r\n                            color: 'white',\r\n                            position: 'absolute',\r\n                            top: 20,\r\n                            right: 20,\r\n                            backgroundColor,\r\n                            cursor: 'auto',\r\n                            '&:hover, &:active': {\r\n                            backgroundColor, \r\n                            },\r\n                        }}\r\n                        disableTouchRipple // Disable ripple effect on touch\r\n                        disableFocusRipple // Disable ripple effect on focus\r\n                >\r\n                {currentIcon}\r\n            </IconButton>\r\n        </Card>\r\n    )\r\n}\r\n\r\nAppTimeDisplay.propTypes ={\r\n    sx: PropTypes.object,\r\n};","import React, { useEffect, useState } from 'react';\r\nimport { Container, Grid } from '@mui/material';\r\nimport Greeting from '../../components/elements/Greetings';\r\nimport AppWidgetSummary from '../app-widget-summary';\r\nimport AppWQISummary from '../appWQISummary';\r\nimport imageSource from '../../img/dashboard-illustration.png';\r\nimport AppPerformanceSummary from '../appPerformanceSummary';\r\nimport AppLogTimeline from '../appLogTimeline';\r\nimport AppTimeDisplay from '../appTimeDisplay';\r\n\r\nexport default function Overview() {\r\n  const [combinedData, setCombinedData] = useState([]);\r\n  \r\n\r\n  useEffect(() => {\r\n    fetchDataAndUpdate();\r\n\r\n    // Set up polling to fetch data at regular intervals (e.g., every 5 seconds)\r\n    const intervalId = setInterval(fetchDataAndUpdate, 5000);\r\n\r\n    // Clean up the interval when the component unmounts\r\n    return () => clearInterval(intervalId);\r\n  }, []);\r\n\r\n  const fetchDataAndUpdate = async () => {\r\n    try {\r\n      const [activityLogsData, otherData] = await Promise.all([fetchActivityLogs(), fetchOtherData()]);\r\n      const newCombinedData = combineAndSortData([...combinedData, ...activityLogsData, ...otherData]);\r\n      setCombinedData(newCombinedData);\r\n    } catch (error) {\r\n      console.error('Error fetching and updating data:', error);\r\n    }\r\n  };\r\n\r\n  const fetchActivityLogs = async () => {\r\n    try {\r\n      const response = await fetch('/api/realm/activityLog'); \r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error fetching activity logs:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const fetchOtherData = async () => {\r\n    try {\r\n      const response = await fetch('/api/realm/stationActivity'); \r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error fetching other data:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const combineAndSortData = (data) => {\r\n    return data.sort((a, b) => new Date(b.dateAdded) - new Date(a.dateAdded));\r\n  };\r\n\r\n  const filterDataWithinTwoWeeks = (data) => {\r\n    const twoWeeksAgo = new Date();\r\n    twoWeeksAgo.setDate(twoWeeksAgo.getDate() - 14);\r\n    return data.filter(item => new Date(item.dateAdded) > twoWeeksAgo);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Container maxWidth=\"lg\">\r\n        <Grid container spacing={3} mt={2}>\r\n          <Grid item xs={12} sm={12} md={6} lg={7}>\r\n            <AppWidgetSummary\r\n              sx={{\r\n                backgroundColor: '#8CACFF',\r\n                px: 4,\r\n                py: 4,\r\n              }}\r\n              title={<Greeting />}\r\n              imageSource={imageSource}\r\n              imageSize=\"35%\"\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={12} md={6} lg={5}>\r\n            <AppTimeDisplay\r\n              sx={{\r\n                backgroundColor: '#0A1929'\r\n              }}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={12} md={6} lg={7}>\r\n            <AppWQISummary \r\n              title=\"Latest WQI Records per Station\"\r\n              subheader\r\n              sx={{\r\n                backgroundColor: '#10273d'\r\n              }}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={12} md={6} lg={5}> \r\n            <AppPerformanceSummary \r\n              title=\"Optimal Water Source\" \r\n              sx={{\r\n                backgroundColor: '#10273d',\r\n              }}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={12} md={12} mt={2} style={{ display:'flex', flexDirection: 'column' }}>\r\n            <span \r\n              style={{ color: 'white', \r\n                       fontFamily: \"Archivo, 'sans-serif'\", \r\n                       fontWeight: 500, \r\n                       fontSize: 25, \r\n                       textTransform: 'uppercase', \r\n                        }}>\r\n              Station Activity Logs\r\n            </span>\r\n            <span \r\n            style={{ color: '#8CACFF', \r\n                     fontFamily: \"Poppins\", \r\n                     fontWeight: 300, \r\n                     fontSize: 13, \r\n                      }}>\r\n              Catch up on the activities from the last two weeks\r\n            </span>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={12} md={12}>\r\n            <AppLogTimeline\r\n              sx={{\r\n                backgroundColor: '#0d2135',\r\n                boxShadow: 'none',\r\n                margin: 0,\r\n                padding: 0,\r\n                maxHeight: '300px', \r\n                overflowY: 'hidden',\r\n                '&:hover': {\r\n                  overflowY: 'auto',\r\n                },\r\n              }}\r\n              list={filterDataWithinTwoWeeks(combinedData)}\r\n            />\r\n          </Grid>\r\n\r\n        </Grid>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n","import Overview from '../sections/view/Overview'\r\n\r\n\r\nexport default function HomePage() {\r\n    return (\r\n        <div className='home'>\r\n            \r\n            < Overview/>\r\n        </div>\r\n    );\r\n}","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M11.65 3.46c.27-.71-.36-1.45-1.12-1.34-5.52.8-9.47 6.07-8.34 11.88.78 4.02 4.09 7.21 8.14 7.87 3.74.61 7.16-.87 9.32-3.44.48-.57.19-1.48-.55-1.62-6.02-1.15-9.68-7.54-7.45-13.35z\"\n}), 'BedtimeRounded');\nexports.default = _default;","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zM2 13h2c.55 0 1-.45 1-1s-.45-1-1-1H2c-.55 0-1 .45-1 1s.45 1 1 1zm18 0h2c.55 0 1-.45 1-1s-.45-1-1-1h-2c-.55 0-1 .45-1 1s.45 1 1 1zM11 2v2c0 .55.45 1 1 1s1-.45 1-1V2c0-.55-.45-1-1-1s-1 .45-1 1zm0 18v2c0 .55.45 1 1 1s1-.45 1-1v-2c0-.55-.45-1-1-1s-1 .45-1 1zM5.99 4.58c-.39-.39-1.03-.39-1.41 0-.39.39-.39 1.03 0 1.41l1.06 1.06c.39.39 1.03.39 1.41 0s.39-1.03 0-1.41L5.99 4.58zm12.37 12.37c-.39-.39-1.03-.39-1.41 0-.39.39-.39 1.03 0 1.41l1.06 1.06c.39.39 1.03.39 1.41 0 .39-.39.39-1.03 0-1.41l-1.06-1.06zm1.06-10.96c.39-.39.39-1.03 0-1.41-.39-.39-1.03-.39-1.41 0l-1.06 1.06c-.39.39-.39 1.03 0 1.41s1.03.39 1.41 0l1.06-1.06zM7.05 18.36c.39-.39.39-1.03 0-1.41-.39-.39-1.03-.39-1.41 0l-1.06 1.06c-.39.39-.39 1.03 0 1.41s1.03.39 1.41 0l1.06-1.06z\"\n}), 'LightModeRounded');\nexports.default = _default;"],"names":["TimeGreetings","useState","greeting","setGreeting","useEffect","hours","Date","getHours","className","user","useAuthContext","Typography","variant","username","title","imageSource","icon","sx","color","imageSize","stationHolder","other","isXsOrSm","useMediaQuery","Card","component","Stack","spacing","direction","borderRadius","m","backgroundColor","boxShadow","Box","width","height","src","alt","style","display","marginLeft","AppWQISummary","subheader","chart","stationData","setStationData","lowestStation","setLowestStation","highestStation","setHighestStation","fetch","response","ok","Error","json","data","newData","Object","keys","forEach","stationId","latestDate","reduce","prev","current","latestEntry","push","lowest","wqi","highest","console","error","fetchData","chartData","map","station","label","value","parseFloat","toFixed","fill","px","py","CardHeader","fontFamily","fontWeight","fontSize","textTransform","lineHeight","mt","mx","ResponsiveContainer","BarChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","horizontal","vertical","stroke","XAxis","dataKey","type","tick","axisLine","tickLine","Label","offset","position","YAxis","interval","angle","Tooltip","cursor","contentStyle","backdropFilter","WebkitBackdropFilter","border","Bar","barSize","radius","Grid","container","justifyContent","item","index","xs","sm","md","lg","Button","padding","marginRight","AppPerformanceSummary","setChartData","loading","setLoading","bestStationInfo","setBestStationInfo","maxLowWQIStation","Math","min","wqiValuesOfIdentifiedStation","String","fromCharCode","subheaderText","AreaChart","id","x1","y1","x2","y2","stopColor","stopOpacity","orientation","ticks","Area","strokeWidth","dot","activeDot","r","mb","marginTop","AppLogTimeline","list","buttonStyle","pointerEvents","overflowX","Paper","overflow","Table","TableHead","TableRow","TableCell","borderBottom","zIndex","TableBody","stationName","tester","fDateTime","dateAdded","getStatusBackgroundColor","status","getStatusFontColor","AppTimeDisplay","currentTime","setCurrentTime","currentDate","setCurrentDate","LightModeRounded","currentIcon","setCurrentIcon","setBackgroundColor","intervalId","setInterval","now","BedtimeRounded","amOrPm","formattedTime","getMinutes","padStart","getSeconds","dayOfWeek","getDay","month","getMonth","dayOfMonth","getDate","formattedDate","clearInterval","marginBottom","IconButton","disableTouchRipple","disableFocusRipple","Overview","combinedData","setCombinedData","fetchDataAndUpdate","Promise","all","fetchActivityLogs","fetchOtherData","activityLogsData","otherData","newCombinedData","combineAndSortData","sort","a","b","Container","maxWidth","flexDirection","maxHeight","overflowY","twoWeeksAgo","setDate","filter","filterDataWithinTwoWeeks","HomePage","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}